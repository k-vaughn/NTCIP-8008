{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Title Page","text":"Working Group Draft     NTCIP 8008 v0.0.0-alpha.11     National Transportation Communications for ITS Protocol     ITS Open-Source Process"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>This document was prepared though an open-source standards development process with the following active contributors:</p> <p></p> <p>Check out the full list of contributors here.</p> <p>In addition, the following submitted comments during the process:</p> <ul> <li>k-vaughn</li> </ul> <p>The resultant document is maintained by the NTCIP Base Standards, Profiles and Protocols (BSP2) Working Group (WG), a subdivision of the Joint Committee on the NTCIP. The Joint Committee on the NTCIP is organized under a Memorandum of Understanding among the American Association of State Highway and Transportation Officials (AASHTO), the Institute of Transportation Engineers (ITE), and the National Electrical Manufacturers Association (NEMA). The Joint Committee on the NTCIP consists of six representatives from each of the standards development organizations (SDOs) and provides guidance for NTCIP development.</p>"},{"location":"code-of-conduct/","title":"A Code of Conduct","text":""},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":"<p>Each entity that participates in the development of this repository as a commenter, contributor, maintainer, or manager agrees to encourage a harassment-free environment and to act and interact in ways that contribute to an open, welcoming, and healthy community.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within the scope of GitHub, and also applies when an individual is officially representing the community in public forums.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at ntcip@nema.org.</p>"},{"location":"code-of-conduct/#details","title":"Details","text":"<p>For additional guidelines on the application of this code, see the Contributor Covenant.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1.</p>"},{"location":"coding-conventions/","title":"C Coding Conventions","text":""},{"location":"coding-conventions/#coding-conventions","title":"Coding Conventions","text":""},{"location":"coding-conventions/#python-coding-conventions","title":"Python Coding Conventions","text":"<p>Each contributor shall adhere to style guidelines defined in Python Enhancement Proposals (PEP) 8 \u2013 Style Guide for Python Code.</p> <p>Highlights of PEP 8</p> <ul> <li>Imports should be at the top of the file</li> <li>Imports should be grouped into three sections with a blank line between each: (1) standard library imports, (2) thirdd party library imports, and (3) local imports</li> <li>Function and variable names should be in lowercase_with_underscores</li> <li>Class names should be in UpperCamelCase</li> <li>Constants should be in ALL_CAPS_WITH_UNDERSCORES</li> <li>Do not use tabs; use four spaces for each indentation level</li> <li>Limit lines to 79 characters; or 72 characters for long comments</li> <li>Separate top-level functions and class definitions with two blank lines</li> <li>Inside functions, use one blank line to separate significant logical sections</li> </ul> <p>Each contributor should use a linter to automatically enforce the PEP 8 rules.</p> <p>Example</p> <p>Pylince</p>"},{"location":"commenter-responsibilities/","title":"3 Commenter Responsibilities","text":""},{"location":"commenter-responsibilities/#commenter-responsibilities","title":"Commenter Responsibilities","text":""},{"location":"commenter-responsibilities/#overview","title":"Overview","text":""},{"location":"commenter-responsibilities/#general","title":"General","text":"<p>Comments on projects using the ITS Open-Source Process are always welcome, no matter how seemingly major or minor. Comments are key to improving products. The ITS Open-Source Process is designed to facilitate and encourage users to submit comments and is therefore kept simple.</p> <p>Within the ITS Open-Source Process, comments can be submitted in either the discussions or issues tab of the project repository.</p>"},{"location":"commenter-responsibilities/#discussions","title":"Discussions","text":"<p>The discussions tab provides an open forum where interested parties can discuss ideas, ask and answer questions, and formulate ideas. The discussions tab does not directly propose any change to the project but can often nurture ideas that ultimately result in refining the overall vision of the project, identify problems or ambiguities in the project contents, develop consensus on project priorities, etc.  </p> <p>Discussions can be started by anyone at any time. Discussions can result in refining the concept of one or more issues before submitting formally submitting them as issues.</p>"},{"location":"commenter-responsibilities/#issues","title":"Issues","text":"<p>Every project should follow a plan. Within the ITS Open-Source Process, the plan is documented by defining issues that are to be addressed, preferrably according to assigned priorities.</p> <p>The issues tab provides an open forum where any interested party can propose specific issues that need to be addressed by project contributors.  The issues can be anything from a missing comma to requesting an entirely new feature. All proposed changes to a project are supposed to be initiated by submitting an issue.</p> <p>When an issue is submitted, the project maintainer is responsible for triaging the issue. Triaging includes reviewing the issue, determining if the issue fits within the project plan, potentially parsing or merging the issue to create easily managable tasks, assigning appropriate priority and tags (e.g., bug, ambiguity, editorial) to the issue, and gaining consensus on the approach. This process can involve working with others on the project team to ensure consensus on the decisions being made.</p> <p>Once an issue has been reviewed and accepted, anyone can claim ownership of the issue and begin resolving it. Given the complexities of version control when there are potentially multiple contributors, it is wise to separate issues into distinct bite-sized tasks that can be addressed with a reasonably short turn-around.</p>"},{"location":"commenter-responsibilities/#submitting-a-comment","title":"Submitting a Comment","text":""},{"location":"commenter-responsibilities/#read-the-readme-file","title":"Read the README file","text":"<p>Before commenting, commenters should be familiar with the project as documented in the README file.</p>"},{"location":"commenter-responsibilities/#respect-the-code_of_conduct","title":"Respect the CODE_OF_CONDUCT","text":"<p>When commenting, commenters shall respect the rules within the CODE_OF_CONDUCT file.</p>"},{"location":"commenter-responsibilities/#use-discussions-if-no-change-is-proposed","title":"Use discussions if no change is proposed","text":"<p>For comments that do not actively propose a specific change to the project, the commenter shall initiate a discussion using the project's discussion template.</p>"},{"location":"commenter-responsibilities/#use-issues-to-propose-changes","title":"Use issues to propose changes","text":"<p>For comments that actively propose a specific change to the project, the commenter shall submit an issue using the project's appropriate issue template (e.g., bug fix, documentation improvement, new feature)</p>"},{"location":"commenter-responsibilities/#comply-with-templates","title":"Comply with templates","text":"<p>The commenter shall comply with all instructions on the selected commenting template without deleting any fields.</p> <p>Note</p> <p>Includion of all fields facilitates processing of the comment and prevents automatic rejection. If a section of the template is not applicable, either explain why it is not needed or write \"N/A\".</p> <p>Tip</p> <p>The specific templates offered can vary from project to project, but the templates often include the following fields:</p> <ul> <li>Title: A short descriptive phrase to allow readers to quickly assess the  comment</li> <li>Description: The details of the comment, especially those not captured  in other fields of the tempalte. If you wish to work on the issue that you   are submitting, you should indicate this in the description. However, you   should not start this work until the issue has been triaged to ensure it   fits with the overall project plan. When reporting a bug, the description   needs to be sufficiently detailed so that the reader can reproduce the   anomaly.</li> </ul>"},{"location":"contributor-responsibilities/","title":"4 Contributor Responsibilities","text":""},{"location":"contributor-responsibilities/#contributor-responsibilities","title":"Contributor Responsibilities","text":""},{"location":"contributor-responsibilities/#overview","title":"Overview","text":"<p>Contributions on projects using the ITS Open Source Process are always welcome, no matter how large or small. However, before contributing, it's important to familiarize yourself with the following resources of the project:</p> <p>Some of this information is standardized in this document, but specific projects can extend or make exceptions to the process and will always have their own project-specific goals. Contributors are responsible for being familiar with the information contained in the following project files, as stored in the project's root directory:</p> <ul> <li>README.md: Provides an overview of the specific project,</li> <li>CODE_OF_CONDUCT.md: Identifies the code of conduct for the project, and</li> <li>CONTRIBUTING.md: Identifies project-specific rules for contributing.  </li> <li>LICENSE.md: Identifies the license agreement for project files</li> </ul> <p>Needs Review</p> <p>We need to make sure that our standard license addresses all concerns. To date, it sounds as if CC-BY is a reasonable approach for documentation and BSD 3 clause is acceptable for code. MIBs probably need a custom license that falls in between these two and restricts the types of changes and use.</p> <p>For projects following the ITS Open-Source Process, the last two files will typically only identify exceptions or extensions to the rules defined by this document.</p> <p>The overall process for contributing to an ITS open-source project is shown in Figure 4-1 and described in the remainder of this section.</p> <p></p>"},{"location":"contributor-responsibilities/#prerequisites","title":"Prerequisites","text":""},{"location":"contributor-responsibilities/#join-the-relevant-working-group","title":"Join the relevant working group","text":"<p>Those wishing to contribute should join the relevant working group.</p> <p>Note</p> <p>Most projects using the ITS Open-Source Process are led by working groups (WGs) within standards development organizations (SDOs). The lead WG and SDO is typically identified within the README file in the root directory of the project repository. Contributors are strongly encouraged to join the corresponding working group to promote better communication among community members and to develop a common vision for the project.</p> <p>Example</p> <p>The ITS Open-Source Process project is led by the Base Standards and Profiles 2 (BSP2) WG of the National Transportation Communications Interface Protocols (NTCIP) Joint Committee (JC).</p> <p>NTCIP Guidance</p> <p>Within the NTCIP, any interested party can send an email to ntcip@nema.org. The email should indicate (1) the working group of interest, (2) the stakeholder sector (e.g., infrastructure owner operator, other government, consultant, device manufacturer, management station developer, etc.), (3) contact information, and (4) a short biography.</p>"},{"location":"contributor-responsibilities/#install-software","title":"Install Software","text":""},{"location":"contributor-responsibilities/#git","title":"Git","text":"<p>Those wishing to contribute shall install Git on their local computer.</p>"},{"location":"contributor-responsibilities/#graphical-user-interface","title":"Graphical User Interface","text":"<p>Those wishing to contribute may install a graphical user interface (GUI) for Git on their local computer.</p>"},{"location":"contributor-responsibilities/#development-environment","title":"Development Environment","text":"<p>Those wishing to contribute shall install the development environment on their local computer.</p> <p>Note</p> <p>Git is available for all major development platforms, including Windows, Mac OS, and Linux. Git allows proper version control among multiple contributors. Git can be downloaded from https://git-scm.com/downloads.</p> <p>Git natively uses a command line interface (CLI), which can be difficult for beginners. There are a variety of graphical user interfaces (GUIs) that are available to assist with interfacing with Git.</p> <p>Example</p> <p>Example GUIs for beginners include:</p> <ul> <li>GitHub Desktop: Very beginner level with minimal user interface</li> <li>SourceTree: Beginner-friendly with support for advanced Git functionality</li> <li>GitKraken: Beginner-friendly with advanced options and modern UI with useful video clips to explain how to perform tasks.</li> </ul> <p>NTCIP Guidance</p> <p>While contributors are allowed to use the CLI or any GUI of their preference, this document references GitKraken videos due to(1) the user-friendly design of GitKraken, (2) the high-quality help (including videos) available for GitKraken.</p>"},{"location":"contributor-responsibilities/#establish-an-account-on-the-repository-hosting-platform","title":"Establish an Account on the Repository Hosting Platform","text":"<p>Those wishing to contribute shall fork the repository to their own account.</p> <p>Note</p> <p>All edits are originate within the contributor's account and all contributions can be traced back to the contributor.</p> <p>NTCIP Guidance</p> <p>Create an account on GitHub. This requires a valid email address but is free for open-source work.</p>"},{"location":"contributor-responsibilities/#fork-the-repository","title":"Fork the repository","text":"<p>Those wishing to contribute shall fork the repository to their own account.</p> <p>Note</p> <p>The main repository is shared by the entire open-source community on GitHub. Individual contributors are not allowed to directly edit this file as that would create a chaotic environment. Forking a repository creates a copy of the repository on the repository hosting platform within the contributor's account. The contributor can then edit the copied repository (as described below). The contributor's repository will inherit the visibility of the project being forked (i.e., for open-source projects, it will be public). This allows the open-source community to review the proposed changes prior to accepting their incorporation into the community repository.</p> <p>Github Guidance</p> <p>Press the \"Fork\" button in the upper-right portion of the shared repository's home page (e.g., https://github.com/&lt;account&gt;/&lt;project&gt;). For complate details, see the Fork a Repository article on GitHub help.</p> <p>Note</p> <p>Each project has a LICENSE.md file that defines its copyright. Projects are encuraged to use CC-BY for documents, BSD 3-clause for code, and the NTCIP MIB copyright for MIBs.</p>"},{"location":"contributor-responsibilities/#clone-the-repository","title":"Clone the repository","text":"<p>The contributor shall clone (i.e., copy an instance of) the forked repository to the local machine where edits are to be made.</p> <p>Note</p> <p>While a fork creates a copy on the host platform (which can be viewed by others), cloning your forked repository creates a copy of your forked repository on a local machine. This allows the contributor to edit files on a local machine rather than directly in the online environment.</p> <p>GitKraken Guidance</p> <ul> <li>GitKraken Guidance</li> </ul>"},{"location":"contributor-responsibilities/#claim-an-issue","title":"Claim an Issue","text":"<p>Before starting on any changes to the project, a contributor shall claim an associated issue.</p> <p>A contributor shall not claim an issue that has the label \"triage\".</p> <p>A new contributor to a project may claim an issue tagged as good first issue, or beginners only.</p> <p>Experienced contributors shall not claim issues tagged with the label \"beginners only\".</p> <p>Experienced contributors should avoid issues tagged with the label \"good first issue\".</p> <p>Note</p> <p>Taking ownership of an issue:</p> <ul> <li>Notifies maintainers that work is starting to address the issue,</li> <li>Allows efficient communication by allowing the maintainers and  contributor to discuss the issue and proposed changes early in the update cycle,</li> <li>Provides a historical record of the steps taken to address the issue,</li> <li>Helps to block inappropriate pull requests as any pull request without an  associated issue can be easily rejected. </li> </ul> <p>When you're new to a project, it's a good idea to start with small,  manageable tasks, fixing bugs, adding tests, or updating documentation.  These will often be tagged with the text \"good first issue\" or  \"beginners-only\". This will help you become familiar with the material and  development workflow without getting overwhelmed.  The goal is to reserve  at least some of these issues for new contributors or until the end of the  project; if everyone solves these problems first, it makes it more  challenging for contributors to gain experience.</p> <p>GitHub Guidance</p> <p>If an issue is not assigned and it is not labeled with \"triage\", it is generally assumed to be available for anyone to work on. Take control of the issue by submitting a comment of <code>.take</code> on the selected issue). When an issue is assigned, it will be indicated under the \"Assignees\" section of the issue.</p> <p></p> <p>Note</p> <p>Projects can implement additional rules regarding the assignment of issues. Always review the project's contributing guidelines to ensure you are aware of any variations from this standard process.</p> <p>Tip</p> <p>If you get stuck while working on your changes or need other clarification, you can always ask for help using the discussions tab of the project. For example, you can get help for the ITS Open-Source Process project at the Discussion Tab.</p>"},{"location":"contributor-responsibilities/#create-a-branch","title":"Create a Branch","text":"<p>Prior to starting work on a claimed issue, the contributor shall create a separate branch for all edits related to that singlular issue.</p> <p>Note</p> <p>Creating a separate branch facilitates tracking of changes and allows easier roll-backs of the project to known states.  </p>"},{"location":"contributor-responsibilities/#make-edits","title":"Make Edits","text":"<p>Once the contributor has claimed an issue and has a branch devoted to the development of that issue, the contributor shall make changes in the local branch according to project guidelines.</p> <p>Note</p> <p>Annex B, C, and D provide preferred guidelines that can be referenced for different types of contributions.</p> <p>If you have questions or concerns during the process (especially between meetings of the corresponding WG), you can use the Discussions tab associated with the project. These forums can be very useful in knowledge sharing and forming consensus, however, users should be aware that the discussions tab does not represent official decisions of the WG.</p> <p>Tip</p> <p>Avoid addressing any other issues as this (1) makes the change larger and delays completion of your primary task, (2) can overlap with changes being made by others, and (3) complicates version control by not clearly documenting when specific changes were made. However, in some cases, it may be appropriate to address multiple small and similar issues at once. For example, multiple grammar issues in documentation can be grouped into a single pull request.</p>"},{"location":"contributor-responsibilities/#pull-and-merge-updates","title":"Pull and Merge Updates","text":"<p>Prior to submitting a PR, the contributor shall pull the latest updates incorporated into the shared project and merge these updates into the contributor's working branch.</p> <p>Note</p> <p>Because multiple contributors can be working on the same project simultaneously, care must be taken to ensure that each contributor has the latest version of files prior to proposing their changes to be incorporated into the shared repository. This is done by first pulling any changes from the shared repository into the contributor's forked version and then pulling those changes down into the contributor's local branch. During this process, the Git environment will highlight any conflicts (e.g., if the contributor and someone else changed the same line of the same file). When this occurs, the contributor will need to resolve each conflict prior to finalizing the merge.</p> <p>GitHub Help</p> <p>To update your local copy, first update your forked (origin) repository:</p> <p>Go to your forked repository on GitHub. Click the \"Sync fork\" button. Click the green \"Update branch\" button.</p> <p>Next, pull the latest changes in the main branch in the origin repository to update your local working branch by following these steps in your terminal:</p> <p><code>git checkout YOUR-BRANCH-NAME</code></p> <p><code>git pull origin main</code></p>"},{"location":"contributor-responsibilities/#test-the-updates","title":"Test the Updates","text":"<p>After pulling and merging the latest updates but prior to submitting the PR, the contributor shall install any necessary dependencies and test the changes to ensure that the changes provide the intended operation without any new bugs.</p> <p>Note</p> <p>It is critical that updates are tested prior to being incorporated into the final code (this includes ensuring that documentation files render correctly). Specific projects can define their own testing process and procedures. You can find the instructions on how to run a project locally in the README file or in the contributing guidelines.</p>"},{"location":"contributor-responsibilities/#commit-the-update","title":"Commit the Update","text":"<p>Prior to pushing the proposed changes to online repository, the contributor shall commit the changes in the working directory.</p> <p>The contributor may perform interim commits during the development of the proposed changes.</p> <p>The contributor shall use the Conventional Commits specification for structuring commit messages.</p> <p>Here are some examples of Conventional Commit messages:</p> <pre><code>feat: add password reset functionality\ndocs: update installation instructions\nchore(build): update dependencies\nfix(login): resolve issue with incorrect password validation\nrefactor(api): streamline error handling in user service\n</code></pre> <p>Note</p> <p>Committing changes ensures that the changes are logged in the contributor's local git account and is required prior to pushing the material to the contributor's online copy.</p>"},{"location":"contributor-responsibilities/#push-the-update-to-contributors-online-repository","title":"Push the Update to Contributor's Online Repository","text":"<p>Once the contributor has completed the proposed revisions and has created a local commit, the contributor shall push the proposed changes to the contriutor's online repository.</p> <p>Note</p> <p>The changes need to be posted to the online repository so that other users can review the changes prior to their incorporation into the shared repository.</p>"},{"location":"contributor-responsibilities/#make-pull-request","title":"Make Pull Request","text":"<p>Once the contributor has completed the above steps, the contributor shall complete a pull request.</p> <p>The contributor's pull request shall comply with the selected pull request template for the project, completing each field.</p> <p>The contributor shall verify that GitHub does not report any action bot or other failures upon submitting the PR.</p> <p>Note</p> <p>In order to ensure that changes made to the shared repository fit with the project plan, follow subittal guidelines, and are free of bugs, it is important that they are reviewed before being incorporated. As such, rather than allowing each contributor to push changes to the shared repository without any review, they request the maintainer to pull the proposed changes. The request initiates the review process, and if successful, the changes will be pulled. The request for the maintainers to pull the updates is called a \"pull request\" (PR). In order to ensure that these requests are valid and useful, they must comply with the pull request template (e.g., identify the issue that the change claims to address).</p> <p>It is especially important that the PR identifies the issue that the PR claims to address and must prefix the issue number with \"Fixes #\" to ensure that the issue is closed once the change is accepted.</p> <p>The contributor will need to correct any errors that occur during the submittal process to ensure that the PR is received by the maintainers.</p> <p>Warning</p> <p>A PR may be marked as invalid and closed if:</p> <ul> <li>the issue is not assigned to the contributor who opened the PR,</li> <li>no issue is linked to the PR,</li> <li>the PR template is incomplete, or any section in the template is deleted, or</li> <li>changes are made directly in the default (<code>main</code>) branch.</li> </ul>"},{"location":"contributor-responsibilities/#cooperate-with-reviewers","title":"Cooperate with Reviewers","text":"<p>The contributor shall work with the review team to address any questions, concerns, or problems that arise.</p> <p>The contributor may appeal any direction received from the reviewers to the parent WG.</p> <p>The contributor shall accept the direction of the review process, including any appeals.</p> <p>Note</p> <p>After a pull request has been submitted, reviewers can have questions or concerns (e.g., failure to comply with style guidelines). In addition, if multiple proposals are received in a short period, last minute changes can cause merge errors that need to be resolved. The contributor is typically the person most qualified to make revisions to the proposed changes without introducing errors. Although expected to be rare, there can be instances where the contributor and reviewers have different opinions about how a change should be implemented. The shared project is managed by the entire team and the contributor needs to respect the decisions made by the full team.</p>"},{"location":"contributor-responsibilities/#what-happens-next","title":"What Happens Next?","text":"<p>After your contribution has been submitted and reviewed, one of the following outcomes may occur:</p> <ol> <li> <p>Your contribution is accepted: If your contribution is approved by the    project maintainers, it will be merged into the main branch of the codebase.</p> </li> <li> <p>Your contribution requires changes: Sometimes, the project maintainers    may request changes to your contribution before it can be accepted. This    could be due to coding issues, conflicts with other changes, or a need for    additional documentation. In this case, make the requested changes and    resubmit your pull request.</p> </li> <li> <p>Your contribution is rejected: In some cases, your contribution may not    align with the project's goals or requirements, or it may not be the best    solution to a problem. If your contribution is rejected, don't be    discouraged. Take the feedback you received as an opportunity to learn and    improve. You can always try contributing to another project or submitting a    different contribution to the same project.</p> </li> </ol>"},{"location":"contributor-responsibilities/#keeping-branches-up-to-date","title":"Keeping Branches Up to Date","text":"<p>It is highly recommended that you update your remote and local branches habitually. That way, your branch will have the latest update when merged into the <code>main</code> branch of the original (<code>upstream</code>) repository.</p> <p>The best times to update your branches are before you push your changes to the remote repository and while you're waiting for your pull request to be reviewed.</p> <p>In general, it is preferrable to make small incremental changes to the project and to provide the updated materials as soon as possible after taking control of an issue. The longer the duration between checking out the project and submitting a pull request the higher the chance that another contributor will make competing changes in one of your files, which may need to be manually inspected to properly merge the changes.</p>"},{"location":"contributor-responsibilities/#merge-conflicts","title":"Merge Conflicts","text":"<p>Merge conflicts are something you'll commonly encounter when contributing to an open source project. When two branches have made different changes to the same line(s) in the same file(s), Git cannot automatically determine which change to keep, resulting in a conflict.</p> <p>When a merge conflict occurs, Git adds conflict markers (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;</code>) to indicate the conflicting lines from different branches. Everything between the <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>=======</code> is the changes that you worked on (current changes). And everything between the <code>=======</code> to <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> is the incoming changes from the remote <code>main</code> branch.</p> <p>You need to pay attention to the conflicts and decide how you want to resolve them. You can keep only your change, incoming change, or both changes.</p>"},{"location":"contributor-responsibilities/#tips-to-prevent-resolving-merge-conflicts-repeatedly","title":"Tips to Prevent Resolving Merge Conflicts Repeatedly","text":"<p>Some open source repositories, such as OpenSauced's guestbook and pizza-verse repositories, have high contribution activities in the same files that can cause merge conflicts.</p> <p>Below are some tips to prevent you from resolving merge conflicts repeatedly when contributing to open source projects:</p>"},{"location":"contributor-responsibilities/#1-following-instructions","title":"1. Following Instructions","text":"<p>Ensure you follow the instructions in the project's README or Contributing Guide, and don't miss any step.</p>"},{"location":"contributor-responsibilities/#2-pull-request-form","title":"2. Pull Request Form","text":"<p>Complete the template form and fill in all areas when creating a pull request.</p>"},{"location":"contributor-responsibilities/#3-resolving-merge-conflicts-immediately","title":"3. Resolving Merge Conflicts Immediately","text":"<p>If a branch has merge conflicts that must be resolved, the merge button is automatically disabled. So, maintainers are not able to merge the pull request.</p> <p>When you notice merge conflicts in your pull request or if a maintainer asks you to resolve merge conflicts, fix them immediately. The sooner you resolve the conflicts, the sooner maintainers can review and merge your pull request.</p>"},{"location":"contributor-responsibilities/#merge-conflicts-in-the-guestbook-repository","title":"Merge Conflicts in the Guestbook Repository","text":"<p>Since the primary purpose of the OpenSauced guestbook is to add your name to <code>.all-contributorsrc</code> and the <code>README.md</code> files, there is a high chance that you will encounter merge conflicts.</p> <p>The conflicts happen when maintainers have merged pull requests before yours while you're working on your changes or waiting for your pull request to be reviewed. And you need to resolve them before your pull request can be merged.</p>"},{"location":"contributor-responsibilities/#resolving-merge-conflicts","title":"Resolving Merge Conflicts","text":"<p>Before resolving merge conflicts, you must first</p> <p>update your branches. Then, follow these steps:</p> <ol> <li> <p>In the <code>.all-contributorsrc</code> file:</p> </li> <li> <p>Click the \"Accept Both Change\" option on the top of your workspace in VS Code.</p> </li> <li> <p>Move your profile details to the end of the contributors' array and fix      anything necessary.</p> </li> <li> <p>In the <code>README.md</code> file:</p> </li> <li> <p>Click the \"Accept Incoming Change\" option on the top of your workspace in      VS Code for each conflict in this file.</p> </li> <li> <p>Run <code>npm run contributors:generate</code>.</p> </li> </ol> <p>You will now see that the all contributors badge has been incremented, and    your profile is generated at the end of the contributors' list in the    <code>README.md</code> file.</p> <ol> <li> <p>Add and commit your changes.</p> <p>git commit -am \"Resolve merge conflicts\"</p> </li> <li> <p>Push your commits to your remote branch.</p> <p>git push</p> </li> </ol>"},{"location":"contributor-responsibilities/#setup","title":"Setup","text":""},{"location":"contributor-responsibilities/#install-git","title":"Install Git","text":"<p>Download and install the git program appropriate for your platform. Using default options should be fine unless you have a particular preference (e.g., for text editor).</p>"},{"location":"contributor-responsibilities/#create-a-github-account","title":"Create a GitHub account","text":"<p>Go to github.com, create an account and sign in</p>"},{"location":"contributor-responsibilities/#fork-the-desired-repository","title":"Fork the Desired Repository","text":""},{"location":"contributor-responsibilities/#install-gitkraken","title":"Install GitKraken","text":"<p>Recommended: Download and install GitKraken. Link GitKraken to your GitHub Account</p>"},{"location":"contributor-responsibilities/#clone-repository","title":"Clone Repository","text":"<p>Make sure to select a directory where you want to store the local copy of the repository. This directory needs to be empty</p>"},{"location":"documentation-conventions/","title":"B Documentation Conventions","text":""},{"location":"documentation-conventions/#documentation-conventions","title":"Documentation Conventions","text":""},{"location":"documentation-conventions/#exceptions-allowed","title":"Exceptions Allowed","text":"<p>Unless otherwise stated in the project-specific CONTRIBUTIONS.md file, each project based on this specification shall develop documentation as defined by this annex.</p>"},{"location":"documentation-conventions/#development-environment","title":"Development Environment","text":""},{"location":"documentation-conventions/#overview","title":"Overview","text":"<p>In addition to the development tools needed to manage and submit any contribution within the Git environment (e.g., Git, GitHub), developing project documentation requires the following tools:</p> <ul> <li>A text editor, which is used to create and edit markdwon and yaml files,</li> <li>Python, which is required to run MkDocs,</li> <li>MkDocs, which is an open-source tool for translating a set of markdown   files into a static website, and</li> <li>Materials for MkDocs, which is an open-source tool that extends the   markdown language to support additional features that are useful for   developing the look and feel of the project's documentation.</li> </ul> <p>This combination of tools has been selected because it:</p> <ul> <li>is designed to be easy to install and use,</li> <li>requires minimal setup,</li> <li>works well with Git and GitHub,</li> <li>supports search functionality,</li> <li>can produce a static website,</li> <li>when coupled with add-ons, can produce PDFs</li> <li>has an active development community</li> </ul> <p>It is recommended to establish this development environment prior to making any edits. Generating the documentation website locally from a known baseline allows the contributor to verify that the development environment is working correctly prior to introducing edits to the files. Contributors are required to generate the documentation locally to verify that their proposed changes do not introduce any errors to the project. The MkDocs development environemnt allows users to see their changes in real time so that any errors can be addressed quickly.</p>"},{"location":"documentation-conventions/#text-editor","title":"Text Editor","text":"<p>Any text editor can be used to produce markdown and yaml files. These files are to have the extensions of \".md\" and \".yml\", respectively.</p> <p>Contributors are encouraged to use Visual Studio Code, which is an open-source editor, with the following extensions enabled as it provides a reasonably close rendering of the final display format:</p> <ul> <li>Markdown Preview Enhanced by Yiyi Wang, this extension provides a markdown   previewer with support for diagrams, math (LaTeX), mermaid, charts, and more;</li> <li>markdownlint by David Anson, this extension assists in ensuring markdown files   follow consistent formatting rules; and</li> <li>YAML by Red Hat, this extension provides syntax highlighting, validation, and   autocomplete for YAML files.</li> </ul> <p>While any text editor can be used, this suite of tools offers a free solution that is designed to render the markdown in real-time while assisting the user in producing high quality code. However, users should be aware that the toolset still does not attempt to render some of the more advanced features of Materials for MkDocs. The final look and feel can be obtained using the MkDocs server.</p>"},{"location":"documentation-conventions/#python","title":"Python","text":"<p>MkDocs requires Python 3.8 or higher. You can check to see if Python is already installed and its version with the following command:</p> <p><code>python --version</code></p> <p>The most recent version of Python can be installed from official Python website.</p> <p>Once installed, you should verify by running both the <code>python --version</code> and <code>pip --version</code> commands. PIP should be installed as a part of the Python package.</p>"},{"location":"documentation-conventions/#mkdocs","title":"MkDocs","text":"<p>Running the MkDocs server locally allows the contributor to see proposed changes in real-time and test them thoroughly prior to submitting pull requests. To install MkDocs, run</p> <p><code>pip install mkdocs</code></p> <p>Once installed, verify its installation with:</p> <p><code>mkdocs --version</code></p> <p>Once you have verified the installation, start the MkDocs server by changing to the directory containing your cloned copy of the project repository and running</p> <p><code>mkdocs serve</code></p> <p>Once the server is running, you can direct a web browser to localhost port 8000 to see the development version of the website. This site will be updated in realtime as you update files in the repository. If you want to create a static site, However, to render all elements within the project correctly, you will need to install Materials for MkDocs.</p>"},{"location":"documentation-conventions/#materials-for-mkdocs","title":"Materials for MkDocs","text":"<p>To install Materials for MkDocs and the commonly used extensions for ITS projects, run the following command:</p> <pre><code>pip install mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"documentation-conventions/#working-with-the-content","title":"Working with the Content","text":"<p>The content of ITS open-source documentation is generally written in Markdown, a lightweight and easy-to-use markup language that allows you to format text in a readable and visually appealing way.</p> <p>Please read the \"Frequently Used Markdown\" section for details about how to use it in this project.</p>"},{"location":"documentation-conventions/#default-document-structure","title":"Default Document Structure","text":"<p>ITS open-source projects can cover a range of projects that have wildly different documentation needs. Each project is allowed to define its own structure, but unless otherwise specified shall use the structure defined in this document, which is intended for projects that result in a product that can be conceptualized as a single traditional document (e.g., a traditional standard).</p> <p>Each major portion of the document shall be defined in a separate markdown file. Major portions are defined as:</p> <ul> <li>the title page, which shall be <code>index.md</code>;</li> <li>each top-level section of the front matter (e.g., Foreword, Introduction);</li> <li>each section in the body of the docuemnt; and</li> <li>each annex.</li> </ul> <p>The document structure shall be reflected in the project's <code>mkdocs.yml</code> file under the <code>nav</code> section with all front matter located under a <code>Front Matter</code> heading.</p> <pre><code>    - Front Matter:\n      - Title Page: index.md\n      - Notices: notices.md\n      - Acknowledgements: acknowledgements.md\n      - Foreword: foreword.md\n      - Introduction: introduction.md\n    - 1 General: general.md\n    - 2 Overview: overview.md\n    - 3 Commenter Responsibilities: commenter-responsibilities.md\n    - 4 Contributor Responsibilities: contributor-responsibilities.md\n    - 5 Maintainer Responsibilities: maintainer-responsibilities.md\n    - 6 WG Responsibilities: wg-responsibilities.md\n    - A Code of Conduct: code-of-conduct.md\n    - B Documentation Conventions: documentation-conventions.md\n    - C Coding Conventions: code-quality.md\n</code></pre> <p>Note</p> <p>When using the default configuration for ITS projects, this results in a left-hand left-hand navigation bar that shows the major portions of the document while the right-hand navigation shows the content of the currently opened section.</p> <p>Note</p> <p>Be sure to follow naming conventions. Notice that file names are not capitalized, and there are hyphens in place of spaces between words.</p>"},{"location":"documentation-conventions/#structure-of-the-title-page-file","title":"Structure of the Title Page File","text":"<p>The <code>index.md</code> file shall represent the title page of the document and shall:</p> <ul> <li>Start with a line containing a hashtag and nothing else</li> <li>Include code that suppresses unwanted markdownlint warnings</li> <li>Identify the status of the document</li> <li>Define the Document Identifier (e.g., NTCIP X8008)</li> <li>Define the Document Title (e.g., ITS Open-Source Process)</li> <li>Any other information required by the Standards Development Organization (SDO)</li> </ul> <p>Example of a Title Page File</p> <pre><code>#\n&lt;!-- markdownlint-disable MD033 --&gt;\n&lt;div style=\"text-align: center; font-style: italic; font-weight: bold;\"&gt;\n  A proposal to the NTCIP Joint Committee&lt;/div&gt;\n&lt;div style=\"text-align: center; font-size: 1.5em; font-weight: bold;\"&gt;\n  NTCIP X8008\n&lt;/div&gt;\n---\n&lt;div style=\"text-align: center; font-size: 1.5em; font-weight: bold;\"&gt;\n  National Transportation Communications ITS Protocol\n&lt;/div&gt;\n&lt;div style=\"text-align: center; font-size: 2em; font-weight: bold;\"&gt;\n  ITS Open-Source Process\n&lt;/div&gt;\n&lt;!-- markdownlint-enable MD033 --&gt;\n</code></pre>"},{"location":"documentation-conventions/#structure-of-all-other-front-matter-files","title":"Structure of All Other Front Matter Files","text":"<p>Each file representing a major portion of the front matter, other than the title page, shall include a single level 1 heading that has the same title as defined in the <code>nav</code> section of the <code>mkdocs.yml</code> file and is the first line of the document</p> <p>Example of Start of a Front Matter File</p> <pre><code># Foreword\n</code></pre>"},{"location":"documentation-conventions/#structure-of-a-section-file","title":"Structure of a Section File","text":"<p>Each file representing a section of the main body of the document shall:</p> <ul> <li>Start with code that sets the section counter for the body to the section   number while suppressing unwanted markdownlint warnings</li> <li>Include a single level 1 heading that has the same title as defined in the   <code>nav</code> section of the <code>mkdocs.yml</code> file and occurs immediately after the code   defining the section number</li> <li>End each heading with <code>{.body}</code></li> </ul> <p>Example of Start of a Section File</p> <pre><code>&lt;!-- markdownlint-disable MD033 --&gt;\n&lt;!-- markdownlint-disable MD041 --&gt;\n&lt;style&gt;\n  body { counter-set: section 3; }\n&lt;/style&gt;\n&lt;!-- markdownlint-enable MD033 --&gt;\n# Documentation Conventions {.body}\n</code></pre> <p>Note</p> <p>Rule MD033 of markdownlint does issues a warning about the use of HTML within markdown, but it is is necessary in this case to allow automated numbering to work properly.</p> <p>Rule MD041 of markdownlint indicates that the first line in a file should be a top-level heading, but our convention requires defining the section number first.</p>"},{"location":"documentation-conventions/#structure-of-an-annex-file","title":"Structure of an Annex File","text":"<p>Each file representing an annex of the document shall:</p> <ul> <li>Start with code that sets the section counter for the annex to the numberical   order of the annex (the script will transofmr this into an alphabetic letter)</li> <li>Include a single level 1 heading that has the same title as defined in the   <code>nav</code> section of the <code>mkdocs.yml</code> file and occurs immediately after the code   defining the section number</li> <li>End each heading with <code>{.annex}</code></li> </ul> <p>Example of Start of an Annex File</p> <pre><code>&lt;!-- markdownlint-disable MD033 --&gt;\n&lt;!-- markdownlint-disable MD041 --&gt;\n&lt;style&gt;\n  body { counter-set: section 1; }\n&lt;/style&gt;\n&lt;!-- markdownlint-enable MD033 --&gt;\n# Example Annex {.annex}\n</code></pre>"},{"location":"documentation-conventions/#adding-definitions-to-the-glossary","title":"Adding Definitions to the Glossary","text":"<p>If you add definitions to the project's glossary, ensure the definitions are added alphabetically.</p>"},{"location":"documentation-conventions/#frequently-used-markdown","title":"Frequently Used Markdown","text":""},{"location":"documentation-conventions/#headings","title":"Headings","text":"<p>The hash (<code>#</code>) symbol at the start of a line denotes a heading (e.g., section, clause, subclause). There are six levels of headings, and the number of hash symbols indicates the heading level. The title of the heading should appear after the hash symbols and a space.</p> <p>Example</p> <pre><code>### Heading 3\n\n#### Heading 4\n</code></pre>"},{"location":"documentation-conventions/#heading-3","title":"Heading 3","text":""},{"location":"documentation-conventions/#heading-4","title":"Heading 4","text":""},{"location":"documentation-conventions/#text-formatting","title":"Text Formatting","text":"<ul> <li>Make text bold by enclosing it with double asterisks (<code>**</code>).</li> <li>Make text italic by enclosing it with single underscores (<code>_</code>).</li> <li>Create inline code by wrapping text with backticks (<code>`</code>).</li> </ul> <p>Example</p> <p><pre><code>**This is a bold text.**\n\n_This is an italic text._\n\nThis is an`inline code`.\n</code></pre> This is a bold text.</p> <p>This is an italic text.</p> <p>This is an<code>inline code</code>.</p>"},{"location":"documentation-conventions/#lists","title":"Lists","text":"<ul> <li>Create ordered lists using numbers followed by a period (<code>1.</code>, <code>2.</code>, etc.).</li> <li>Create unordered lists using hyphens (<code>-</code>).</li> <li>The line before a list must be blank and a list cannot be immediately   precedded by a different list</li> <li>The style for the list is defined by the first list item</li> </ul> <p>Example</p> <pre><code>1.  Item 1\n2.  Item 2\n\nNew List\n\n- Unordered Item 1\n- Unordered Item 2\n</code></pre> <ol> <li>Item 1</li> <li>Item 2</li> </ol> <p>New List</p> <ul> <li>Unordered Item 1</li> <li>Unordered Item 2</li> </ul> <p>Note</p> <p>The numbering of numbered lists is automatic within markdown (i.e., when rendered, the list items are numbered sequentially from 1 regardless of what numbers are contained within the markdown file); however, it is good coding practice to maintain the correct numbering within the markdown file to prevent any confusion among contributors.</p>"},{"location":"documentation-conventions/#links","title":"Links","text":"<p>Create links using square brackets (<code>[]</code>) for the link text and parentheses (<code>()</code>) for the URL.</p> <p>Example</p> <p><pre><code>[NTCIP](https://ntcip.org)\n</code></pre> NTCIP</p>"},{"location":"documentation-conventions/#images","title":"Images","text":"<p>Embed images using an exclamation mark (<code>!</code>), followed by square brackets (<code>[]</code>) for the alt text, and parentheses (<code>()</code>) for the image URL. AN optional attribute field can be added to the end to specify the size.</p> <p>Example</p> <p><pre><code>![NTCIP](_assets/images/NTCIP.jpg){ width=200px }\n</code></pre> </p>"},{"location":"documentation-conventions/#blockquotes","title":"Blockquotes","text":"<p>Create blockquotes using the greater-than symbol (<code>&gt;</code>) or through Materials for MkDocs' admonition quote (<code>!!! quote</code>).</p> <p>Example</p> <pre><code>&gt; This is a blockquote.\n\n!!! quote\n    This is a Materials for MkDocs admonition quote.\n</code></pre> <p>This is a blockquote.</p> <p>Quote</p> <p>This is a Materials for MkDocs admonition quote.</p>"},{"location":"documentation-conventions/#code-blocks","title":"Code Blocks","text":"<p>Create code blocks using triple backticks (<code>```</code>) for fenced code blocks and specify a language next to the backticks before the fenced code block to highlight the syntax.</p> <p>Example</p> <pre><code>```\nbash git pull\n```\n</code></pre>"},{"location":"documentation-conventions/#admonitions","title":"Admonitions","text":"<p>Create callout out blocks for different purposes using the Materials for MkDocs admonistions feature by including three explanation points and the admonition type with the contained text indented by four spaces (<code>!!! note</code>)</p> <p>Example</p> <pre><code>!!! note\n    This is a note.\n\n!!! tip\n    This is a tip.\n</code></pre> <p>Note</p> <p>This is a note.</p> <p>Tip</p> <p>This is a tip.</p> <p>Materials for MkDocs supports the following standard admonitions:</p> <ul> <li>abstract</li> <li>bug</li> <li>danger</li> <li>example</li> <li>failure</li> <li>info</li> <li>note</li> <li>question</li> <li>quote</li> <li>success</li> <li>tip</li> <li>warning</li> </ul>"},{"location":"documentation-conventions/#markdown-tips","title":"Markdown Tips","text":"<ul> <li>Preview your Markdown locally to ensure proper formatting before submitting   your contribution.</li> <li>Keep your Markdown content organized, and use headings to structure your sections.</li> <li>There should be exactly one <code>heading 1</code> within each file.</li> <li>Use code blocks to highlight code snippets or configuration examples.</li> <li>See the official Markdown Guide   for more information about Markdown.</li> <li>See the   Materials for MkDocs Guide for   more information about Materials for MkDocs.</li> </ul>"},{"location":"examples/","title":"D Material for MkDocs Eamples","text":"<ol> <li> <p>Short note on one line\u00a0\u21a9</p> </li> <li> <p>Long footnotes must start on the following line and be indented by four  spaces. Clicking on the icon at the end of the footnote will cause the  display to jump back to the location of the footnote in the text.\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/#examples-for-material-for-mkdocs","title":"Examples for Material for MkDocs","text":"<p>Warning</p> <p>Interactive features have limitations when the site is rendered as a PDF.</p>"},{"location":"examples/#call-out-blocks","title":"Call-out Blocks","text":""},{"location":"examples/#code-blocks-with-syntax-highlighting","title":"Code blocks with syntax highlighting","text":"<p>Code blocks allow a user to define a block of text that is called out to appear as computer code in a specified language. Material for MkDocs includes an extension to support a wide range of syntax highlighters (i.e., to colorize keywords) and also allows custom-defined syntax highlighters for user-defined languages. Code blocks start with three tick marks followed by a space and then an indication of the syntax highlter to be used. The block of code is indented with four spaces and the block ends with another three tick mark code.</p> C++ ExampleC++ Example CodeASN.1 ExampleASN.1 Example Code <pre><code>    for(i = 0; i &lt; max; i++) {\n        // sample loop code\n    }\n</code></pre> <pre><code>    ``` c++\n        for(i = 0; i &lt; max; i++) {\n            // sample loop code\n        }\n    ```\n</code></pre> <pre><code>    SEQUENCE OF {\n        item1 INTEGER (0..255),\n        item2 OCTET STRING\n    }\n</code></pre> <pre><code>    ``` asn1\n        SEQUENCE OF {\n            item1 INTEGER (0..255),\n            item2 OCTET STRING\n        }\n    ```\n</code></pre>"},{"location":"examples/#admonitions","title":"Admonitions","text":"<p>Material for MkDocs supports creating call-out boxes for notes, examples, questions, information, etc. It calls these boxes \"admonitions\". They are represented in a similar way to code blocks but start with three exclamation points (!) followed by a space and then the type of admonition.</p> Note ExampleCode for NoteWarning ExampleCode for Warning <p>Note</p> <p>Material for MkDocs allows users to define their own admonition types as well.</p> <pre><code>    !!! note\n        Material for MkDocs allows users to define their own admonition types as well.\n</code></pre> <p>Warning</p> <p>The type of admonition defines the color and icon used in the banner of the box.</p> <pre><code>    !!! warning\n        The type of admonition defines the color and icon used in the banner of the box.\n</code></pre>"},{"location":"examples/#collapsable","title":"Collapsable","text":"<p>Material for MkDocs also allows call-out boxes to be collapsible by using question marks instead of the exclamation points.</p> Note ExampleCode for NoteWarning ExampleCode for Warning Note <p>Material for MkDocs allows users to define their own admonition types as well.</p> <pre><code>    ??? note\n        Material for MkDocs allows users to define their own admonition types as well.\n</code></pre> Warning <p>The type of admonition defines the color and icon used in the banner of the box.</p> <pre><code>    ??? warning\n        The type of admonition defines the color and icon used in the banner of the box.\n</code></pre> <p>Note</p> <p>When rendered to a PDF, a collapsable box is always shown expanded, but includes a downward arrow (\u2228) in the title bar.</p>"},{"location":"examples/#content-tabs","title":"Content Tabs","text":"<p>As shown in these examples, boxes can also have multiple tabs. This is achieved by using three equal signs (=).</p> <p>Example</p> Tab 1Tab 2Code <p>Example</p> <p>This is an example using tabs.</p> <p>Note</p> <p>The code tab only shows the first two tabs to avoid recursive code.</p> <pre><code>=== \"Tab 1\"\n    !!! example\n        This is an example using tabs.\n\n=== \"Tab 2\"\n    !!! note\n        The code tab only shows the first two tabs to avoid recursive code.\n</code></pre> <p>Tip</p> <p>When rendered to a PDF, the tabs are shown across the top but the content of each tab is displayed in order (with no real distinction between the content of each tab).</p>"},{"location":"examples/#annotations","title":"Annotations","text":"<p>If there is a preference to have comments appear by the user clicking and seeing a tooltip, Material for MkDocs also supports annotations</p> Sample annotationCode for annotation <p>Clicking on this (1) icon will show more text</p> <ol> <li>More text</li> </ol> <pre><code>    Clicking on this (1) icon will show more text\n    { .annotate }\n\n    1. More text\n</code></pre> <p>Warning</p> <p>When rendered to a PDF, the annotation is rendered largely as the markdown text, minus the <code>{ .annotate }</code> line.</p>"},{"location":"examples/#footnotes","title":"Footnotes","text":"<p>Footnotes are similar to annotations but place the additional information at the bottom of the page rather than as a tooltip that appears.</p> Sample footnoteCode for annotation <p>Clicking on the superscripts<sup>1</sup> will jump to the footnote<sup>2</sup></p> <pre><code>    Clicking on this[^1] icon will show more text[^2]\n\n    [^1]: Short note on one line\n    [^2]:\n        Long footnotes must start on the following line and be indented by four \n        spaces. Clicking on the icon at the end of the footnote will cause the \n        display to jump back to the location of the footnote in the text.\n</code></pre> <p>Tip</p> <p>When rendered to a PDF, the footnote is rendered at the end of the file (e.g., section) where the footnote appears.</p>"},{"location":"examples/#abbreviations-glossary","title":"Abbreviations / Glossary","text":"<p>Tooltips can also be used to display term definitions or meanings of abbreviations (abbr). For one-off usage, the file simply includes a line (typically at the end) the indicates the term in square brackets preceded by an asterisk and followed by a colon space and the definition. The line defining the term is not rendered, but the term being defined (e.g., abbr) will be underlined whereever it occurs in the document and hovering over any instance of the term will reveal its definition in a tooltip. By using the auto_append feature, all term definitions can be moved to a separate file and applied to all pages within the project.</p> Code for defining abbr mkdocs.yml <pre><code>    *[abbr]: abbreviation\n</code></pre> <pre><code>    markdown_extensions:\n      - pymdownx.snippets:\n          auto_append:\n            - includes/abbreviations.md\n</code></pre> <p>Warning</p> <p>When rendered to a PDF, the information in the tooltip is not included in the document.</p>"},{"location":"examples/#paragraph-attributes","title":"Paragraph attributes","text":"<p>The Attribute Lists extension allows to add HTML attributes and CSS classes to almost every Markdown inline- and block-level element with a special syntax.</p> <p>For example, this document marks all headings with the .annex class. This applies the annex style from the extra.css file so that the heading is preceded with a section number that starts with a letter.</p> <p>Example</p> Example headingCode for example <pre><code>    ### My heading {.annex}\n</code></pre>"},{"location":"examples/#my-heading","title":"My heading","text":""},{"location":"examples/#sortable-tables","title":"Sortable tables","text":"<p>Standard markdown supports tables; Material for MkDocs allows for extending this feature to allow for sortable tables with some edits to the mkdocs.yml file and a javascript.</p> Sortable table mkdocs.yml docs/javascripts/tablesort.jsSortable table code Group Title WG 1 Architecture WG 3 ITS geographic data WG 5 Fee and toll collection WG 7 General fleet management and commercial/freight WG 8 Public transport/emergency WG 9 Integrated transport information, management and control WG 10 Traveller information systems WG 14 Driving automation and active safety systems WG 16 Communications WG 17 Nomadic Devices in ITS Systems WG 18 Cooperative systems WG 19 Mobility integration WG 20 Big Data and Artificial Intelligence supporting ITS <pre><code>    extra_javascript:\n      - &lt;https://unpkg.com/tablesort@5.3.0/dist/tablesort.min.js&gt;\n      - javascripts/tablesort.js\n</code></pre> <pre><code>    document$.subscribe(function() {\n      var tables = document.querySelectorAll(\"article table:not([class])\")\n      tables.forEach(function(table) {\n        new Tablesort(table)\n      })\n    })\n</code></pre> <pre><code>    |Group | Title                 |\n    |:----:|:----------------------|\n    |WG 1  | Architecture          |\n    |WG 3  | ITS geographic data   |\n    |WG 5  | Fee and toll collection |\n    |WG 7  | General fleet management and commercial/freight|\n    |WG 8  | Public transport/emergency |\n    |WG 9|Integrated transport information, management and control|\n    |WG 10|Traveller information systems|\n    |WG 14 | Driving automation and active safety systems|\n    |WG 16 | Communications |\n    |WG 17 | Nomadic Devices in ITS Systems |\n    |WG 18 | Cooperative systems |\n    |WG 19 | Mobility integration |\n    |WG 20 | Big Data and Artificial Intelligence supporting ITS |\n</code></pre>"},{"location":"examples/#mermaid-diagrams","title":"Mermaid diagrams","text":"<p>Material for MkDocs supports Mermaid diagrams. Mermaid allows for relatively simple text-based statements to define diagrams that follow well-defined rules, such as UML diagrams, block diagrams, etc.</p> <p>Example</p> Sequence diagramSequence diagram code <pre><code>%%{init: { 'sequence': { 'mirrorActors': false } }}%%\nsequenceDiagram\n  participant Proposer\n  participant Committee\n  participant WG as Working Group\n  participant Maintainer\n  participant Repo as Open-Source Project Repository\n\n  Proposer -&gt;&gt; Committee: Propose project\n  Committee -&gt;&gt; WG: Establish WG\n  Committee -&gt;&gt; Maintainer: Assign maintainer\n  Maintainer -&gt;&gt; Repo: Establish public repository\n  Maintainer -&gt;&gt; Repo: Upload initial baseline\n  Maintainer -&gt;&gt; WG: Suggest project plan\n  WG --&gt;&gt; Maintainer: feedback\n  Maintainer -&gt;&gt; Repo: Post project plan\n  Maintainer -&gt;&gt; Repo: Create appropriate branches for work</code></pre> <pre><code>    ```mermaid\n    %%{init: { 'sequence': { 'mirrorActors': false } }}%%\n    sequenceDiagram\n      participant Proposer\n      participant Committee\n      participant WG as Working Group\n      participant Maintainer\n      participant Repo as Open-Source Project Repository\n\n      Proposer -&gt;&gt; Committee: Propose project\n      Committee -&gt;&gt; WG: Establish WG\n      Committee -&gt;&gt; Maintainer: Assign maintainer\n      Maintainer -&gt;&gt; Repo: Establish public repository\n      Maintainer -&gt;&gt; Repo: Upload initial baseline\n      Maintainer -&gt;&gt; WG: Suggest project plan\n      WG --&gt;&gt; Maintainer: feedback\n      Maintainer -&gt;&gt; Repo: Post project plan\n      Maintainer -&gt;&gt; Repo: Create appropriate branches for work\n    ```\n</code></pre>"},{"location":"examples/#additional-features","title":"Additional features","text":""},{"location":"examples/#search","title":"Search","text":"<p>The search feature adds a search field into the page header. Include by including the following in your mkdocs.yml file.</p> <pre><code>    plugins:\n      - search\n</code></pre>"},{"location":"examples/#comment-system","title":"Comment System","text":"<p>Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension.</p>"},{"location":"examples/#fields-for-information-from-github","title":"Fields for information from GitHub","text":"<p>When using the <code>mkdocs-git-revision-date-localized</code> plugin, users can show the release number on the index page using the field <code>{{ release_number }}</code>.</p>"},{"location":"examples/#version-history","title":"Version history","text":"<p>Material for MkDocs has a powerful versioning system that allows a site to maintain a history of all released versions of a document.</p>"},{"location":"examples/#last-edit-date-for-each-page","title":"Last edit date for each page","text":"<p>The <code>mkdocs-git-revision-date-localized-plugin</code> for Material for MkDocs. An example of this appears at the bottom of this page and is enabled by ensuring the git-revision-date-localized feature is listed in the plugins section of your mkdocs.yml file.</p>"},{"location":"foreword/","title":"Foreword","text":""},{"location":"foreword/#overview","title":"Overview","text":"<p>This document is an NTCIP Open-Source NTCIP Process, Control, and Information Management document provided as Interim for Field Release (IFR).</p> <p>Open-source documents are developed using the ITS Open-Source Process, as defined in NTCIP IFR-8008. This process provides an open standards development process that accepts issues reported by the community and resolved by peer-reviewed contributions from the community. The open source process concludes with the resultant material being approved by the defined approval process.</p> <p>IFR documents are approved through a streamlined process focused on the technical experts of the community (e.g., those participating in the open-source development process) rather than through a formal ballot of industry managers.</p> <p>NTCIP Process, Control, and Information Management documents define the practices and policies used by the NTCIP Joint Committee and its working groups in developing and maintaining NTCIP publications.</p> <p>This document defines the process for developing projects for the ITS community using an open-source environment (e.g., GitHub). The project can produce any type of product, such as a guide, a technical specification, a test procedure (e.g., including code), etc.</p> <p>The approval process for the resultant open-source product is based on the target level of specification. For example, an IFR specification undergoes a less formal approval process than a full standard.</p>"},{"location":"foreword/#approvals","title":"Approvals","text":"<p>IFRs are peer reviewed within the open-source process with final approval by an associated WG established by the NTCIP Joint Committee.</p> <p>Approval information is provided within the online environment.</p> <p>For more information about NTCIP standards, visit the NTCIP Web Site at www.ntcip.org.</p>"},{"location":"foreword/#user-comment-instructions","title":"User Comment Instructions","text":"<p>Comments can be submitted at any time. In preparation of this NTCIP standards publication, input of users and other interested parties was sought and evaluated.</p> <p>Comments on open-source projects can be submitted either on the discussions or issues tab of the project.</p> <p>Discussions can be initiated at any time and anyone in the community can respond, all within a public environment. Responses to discussion comments are strictly informative and may not be accurate. Discussion comments can lead to the submittal of issues that need to be resolved to clarify the standard.</p> <p>Issues can be submitted at any time. Issues are triaged by the project maintainer, who will evaluate their merit, classify them (e.g., as a bug, documentation issue, ommission), and in most cases respond to the submitter. Once ready, issues will be available for contributors to volunteer to address. When a volunteer has a proposed solution, it can be submitted to the project and approved in a relatively short period (when compared to the traditional standards approval process). However, updates to the projects are still version controlled so that users can reference a specific version of the project without fear of it changing.</p> <p>Comments should use the templates provided on the website; otherwise they may be ignored.</p>"},{"location":"foreword/#history","title":"History","text":"<p>For a history of the project, see the projects releases page.</p>"},{"location":"general/","title":"1 General","text":""},{"location":"general/#general","title":"General","text":""},{"location":"general/#scope","title":"Scope","text":"<p>This document specifies the process used to produce open-source documents within the field of Intelligent Transportation Systems (ITS).</p> <p>The process follows general practices within the larger open-source community; however, this document:</p> <ul> <li>provides a step-by-step overview of the process, so that those unfamiliar with open-source processes can better understand the process and become contributors,</li> <li>formalizes the process (e.g., by clearly defining what are requirements), and</li> <li>tailors the process (e.g., by defining the preferred tools to be used).</li> </ul> <p>The process to approve the resultant product is defined elsewhere (e.g., NTCIP 8001).</p> <p>The ITS Open-Source Process is based on the practices defined by open-sauced. However, whereas open-sauced is written as an informative guide and describes how systems can work; this document is written as a specification to define how the ITS Open-Source Process will work. While still providing a discussion of the issues; it highlights the requirements and notable options along the way by stating each in its own paragraph and boldfacing the keywords \"shall\" and \"may\" to clearly designate requirements and options. The remaining text provides further guidance and can include additional options that do not necessitate specific numbering.</p> <p>We recognize that onboarding to a new project can be challenging, especially if you're new to open source development. Be patient, and don't be discouraged by setbacks or mistakes. You'll become more comfortable and confident in your contributions with persistence and practice.</p>"},{"location":"general/#references","title":"References","text":"<p>The following documents are referenced by this document. At the time of publication, the editions indicated were valid.</p>"},{"location":"general/#normative-references","title":"Normative References","text":"<p>Normative references contain provisions that, through reference in this text, constitute provisions of this document. All standards are subject to revision, and parties to agreements based on this standard are encouraged to investigate the possibility of applying the most recent editions of the standard listed.</p> <ul> <li>ISO/IEC/IEEE 24765:2017: Systems and software engineering \u2014 Vocabulary, 2017</li> <li>GitHub</li> <li>MkDocs</li> <li>Materials for MkDocs</li> <li>ReqView</li> <li>Python</li> </ul>"},{"location":"general/#other-references","title":"Other References","text":"<p>Other references are included to provide a more complete understanding of this document and its relationship to other documents.</p>"},{"location":"general/#other-resources-for-contributors","title":"Other Resources for Contributors","text":"<p>This document standardizes and tailors certain aspects of the information contained in open-sauced; however, it is not a complete replacement of that material. If you wish to learn more about open-source development, the following materials may be of interest:</p> <ul> <li>What is open-source?</li> <li>Why open-source?</li> <li>The Secret Sauce</li> <li>Types of Open-Source Contributions</li> <li>Open Source Guides</li> <li>Introduction to GitHub and Open Source Projects</li> </ul>"},{"location":"general/#other-resources-for-maintainers","title":"Other Resources for Maintainers","text":"<p>If you wish to learn more about open-source maintenance, the following materials may be of interest:</p> <ul> <li>Understanding the Role of an Open Source Maintainer</li> <li>How to Communicate and Collaborate Effectively</li> <li>Building Community</li> <li>Maintainer Power Ups</li> <li>Building Your Team</li> <li>The Power of Open Source Metrics</li> <li>Contributor Ladder Template</li> <li>Maintainer Community</li> </ul>"},{"location":"general/#general-statements","title":"General Statements","text":"<p>The remainder of this document is broken into the following chapters:</p> <ul> <li>Commenting Process: Details the process of contributing to open-source projects and provides step-by-step processes for using the preferred tools of the ITS open-source projects.</li> <li>Contribution Process: Details the process of contributing to open-source projects and provides step-by-step processes for using the preferred tools of the ITS open-source projects.</li> <li>Maintenance Process: Details the rules that project maintainers are to follow when managing an ITS open-source project. This includes processes for setting up new projects, managing issues and pull requests, maintaining quality, and coordinating with standard development organizations.</li> <li>Approval Process: Defines the approval stages for ITS open-source projects and the processes required for approval for each stage and subsequent tagging and publication of versions.<sup>1</sup></li> <li>Documentation Conventions: Annex B defines the preferred styles, processes, and tools for developing documentation for ITS open-source projects, including projects that are 100% documentation (e.g., the ITS Open-Source Process project).</li> <li>Code Conventions: Annex C defines the styles, processes, and tools for developing computer code for ITS open-source projects, including Python and ASN.1.</li> <li>Requirements Management: Defines preferred ways to use requirement management tools to produce content that can be easily integrated into the ITS open-source pojects while providing clear traceability.</li> </ul>"},{"location":"general/#glossary","title":"Glossary","text":"<p>For terms not defined here, English words are used in accordance with their definitions by the merriam-webster online dictionary. Electrical and electronic terms not defined in this section or in Webster's New Collegiate Dictionary are used in accordance with their definitions in ISO/IEC/IEEE 24765:2017.</p> <p>backlog: A backlog is a list of tasks that need to be completed within a project. Typically, these are tasks that are not yet assigned to a developer and are waiting to be worked on. Sometimes, these could be tasks that were open weeks or months ago and are still waiting to be worked on.</p> <p>branch: A branch is a separate version of the code that's created for development purposes. Branches allow contributors to experiment with changes without affecting the main codebase. When changes are ready to be merged into the main codebase, they're typically submitted as a pull request.</p> <p>bug: A bug refers to an error, flaw, or defect in code that adversely affects the proper functioning of the software. Open source projects often depend on contributions from the community to identify and rectify these bugs.</p> <p>clone: Cloning is the process used to copy an existing Git repository into a new local directory. The <code>git clone</code> command will create a new local directory for the repository, copy all the contents of the specified repository, create the remote tracked branches, and checkout an initial branch locally. By default, Git clone will create a reference to the remote repository called origin.</p> <p>code freeze: A code freeze is a period of time where no new code is added to a project. It is often used to prepare for a release and ensure that the code is stable and ready for production.</p> <p>code review: A code review is when a maintainer or contributor will review the work of another contributor. This is a great way to ensure that the code is high quality and meets the standards of the project.</p> <p>containerization: Containerization is a way of packaging and running applications. Instead of installing an app directly on your computer, you put it in a container that includes everything it needs to work. This container can then run on your computer alongside other containers. It's a way to organize and run multiple applications on the same machine, making it easier for developers to manage and scale their applications.</p> <p>continuous integration (CI): Continuous integration (CI) is a development approach in which developers regularly merge code into a shared repository. For each change, an automated build and test process is run to detect errors as quickly as possible.</p> <p>continuous deployment (CD): Continuous deployment (CD) is often associated with continuous integration (CI) and refers to keeping your application deployable at any point or even automatically releasing to production. CD means that every change which passes the automated tests is deployed to production automatically.</p> <p>contributor: A contributor is anyone who makes changes, additions, or suggestions to an open source project. Contributors can be developers, designers, writers, testers, or anyone else who helps to make the project better.</p> <p>core member: A core member is a contributor who has been granted additional privileges or responsibilities within an open source project. Core members are typically trusted contributors who have demonstrated a deep understanding of the project and have made significant contributions to its development.</p> <p>docs: Docs is an abbreviation for \"documentation\". It primarily explains how to implement and use a product or an open source project. It also provides information on how to contribute to the project and expectations for contributors. Documentation is often written using Markdown, a lightweight markup language.</p> <p>fork: A fork is a copy of a repository. When you fork a repository, you create a new copy of the codebase that you can modify and experiment with without affecting the original codebase.</p> <p>GitHub actions: GitHub Actions are a way to automate tasks within your software development life cycle. GitHub Actions are event-driven, meaning that you can run a series of commands after a specified event has occurred. Examples of GitHub Actions include running tests, deploying to production, and sending notifications.</p> <p>GitHub discussions: GitHub Discussions are a way to have conversations about your project directly in GitHub. They are a great way to discuss ideas, ask questions, and share knowledge with your community.</p> <p>issue: An issue is a problem or bug that needs to be addressed in the code. Issues can be created by anyone, and they're often used to keep track of bugs, feature requests, and other tasks that need to be done.</p> <p>linting: Linting is the process of running a program that will analyze code for potential errors. A popular linting tool used frequently is ESLint. You can setup an action to run ESlint against each pull request that comes in to check for potential errors before it makes it into production.</p> <p>maintainer: A maintainer is a person or a group of people responsible for maintaining a specific open source project. Maintainers are typically responsible for reviewing and accepting or rejecting contributions from other contributors. They also have the authority to make final decisions about the direction and scope of the project.</p> <p>markdown: Markdown is a lightweight markup language commonly used for creating formatted text documents. It is widely used for creating documentation and README files in software development due to its simplicity and readability.</p> <p>merge: Merging is the process of combining changes from one branch into another. When a pull request is accepted and merged, the changes made in the pull request become part of the main codebase.</p> <p>onboarding: Onboarding documentation helps new team members or collaborators quickly become familiar with a project's structure, goals, and processes.</p> <p>OSS Projects: OSS stands for \"Open Source Software\" projects. These are software projects where the source code is made available to the public, allowing anyone to view, use and modify the software.</p> <p>pull request: A pull request is a request from a contributor to a maintainer for changes made to the code to be pulled into a codebase.</p> <p>quality assurance: Quality assurance in open source projects involves testing, reviewing, and ensuring the software meets the desired standards. Community members often contribute to testing and reporting issues to improve the software's quality.</p> <p>release candidate: A release candidate is a beta version of software with the potential to be a final product. It is typically the last version before the final release.</p> <p>release notes: Release notes are documents that detail changes, enhancements, bug fixes, and new features in each software release. They inform users and stakeholders about what to expect in a new version of the software.</p> <p>repository: A repository is a central location where code is stored and managed. In open source, repositories are often hosted on platforms like GitHub, GitLab, or Bitbucket. Each repository can contain one or more projects, and contributors can submit changes to the code by making pull requests.</p> <p>style guide: A style guide is a set of rules and conventions that define the preferred formatting, writing style, and visual elements used in documentation and other content. This helps maintain consistency and clarity across documents, making them easier to read and understand.</p> <p>versioning: Versioning is the process of assigning either unique version names or numbers to new releases of your project. Some versions are released as \"major\" versions, while others are released as \"minor\" versions.</p> <ol> <li> <p>TODO: Move the approval process to NTCIP 8001\u00a0\u21a9</p> </li> </ol>"},{"location":"introduction/","title":"Introduction","text":"<p>This site defines the ITS Open-Source Process as used by several projects within the ITS standards community. The process follows general practices within the larger open-source community; however, this document:</p> <ul> <li>provides a step-by-step overview of the process, so that those unfamiliar with   open-source processes can better understand the process and become   contributors,</li> <li>formalizes the process (e.g., by clearly defining what are requirements), and</li> <li>tailors the process (e.g., by defining the preferred tools to be used).</li> </ul> <p>This document contains one normative annex.</p> <p>The following keywords apply to this document:  AASHTO, ITE, NEMA, NTCIP, open-source, process.</p> <p>This document uses only metric units.</p>"},{"location":"maintainer-responsibilities/","title":"5 Maintainer Responsibilities","text":""},{"location":"maintainer-responsibilities/#maintainer-responsibilities","title":"Maintainer Responsibilities","text":""},{"location":"maintainer-responsibilities/#overview","title":"Overview","text":"<p>The maintainer for an open-source project fulfills many responsibilities, including setting up the project, managing issues, reviewing submittals, and leading the development community. In addition, the maintainer is often a prime contributor.</p>"},{"location":"maintainer-responsibilities/#establish-repository","title":"Establish Repository","text":"<p>The maintainer shall work with the sponsoring SDO to establish the open-source repository for the project.</p> <p>Example</p> <p>NTCIP repositories are hosted athttps://github.com/ite-org/.</p>"},{"location":"maintainer-responsibilities/#configure-project-settings","title":"Configure Project Settings","text":""},{"location":"maintainer-responsibilities/#issues-and-discussions","title":"Issues and Discussions","text":"<p>The maintainer shall ensure that the issues and discussion pages are enabled for the ITS open-source project.</p> <p>Note</p> <p>Within GitHub, issues are enabled by default but the discussions tab is disabled. To enable, go to the settings tab and select discussions in the general section.</p>"},{"location":"maintainer-responsibilities/#pages","title":"Pages","text":"<p>If the project includes documentation, the maintainer shall ensure that GitHub pages is enabled for the project.</p> <p>GitHub Process</p> <p>To activate GitHub Pages using MkDocs, create a gh-pages branch. The go to the settings tab and select pages from the left-hand menu. Set Source to \"deploy from a branch\" and then select the \"gh-pages\" branch and the /root directory.</p>"},{"location":"maintainer-responsibilities/#dependabot","title":"Dependabot","text":"<p>If the project includes code, the maintainer may configure Dependabot to report issues or create pull requests to update dependencies with security vulnerabilities.</p> <p>Note</p> <p>Dependabot is a GitHub feature that monitors the project's dependencies and reports any possible security vulnerabilities. To learn more about this feature, please read through the GitHub documentation.</p>"},{"location":"maintainer-responsibilities/#set-up-project-files","title":"Set Up Project Files","text":""},{"location":"maintainer-responsibilities/#overview_1","title":"Overview","text":"<p>The maintainer shall ensure the following files are provided in the repository when starting the project and maintained throughout the project:</p> <ul> <li>README.md</li> <li>CODE_OF_CONDUCT.md</li> <li>CONTRIBUTING.md</li> <li>LICENSE.md</li> <li>SECURITY.md</li> <li>.github/CODEOWNERS</li> <li>appropriate issue templates in .github/ISSUE_TEMPLATE/</li> <li>appropriate PR temapltes in .github/PULL_REQUEST_TEMPLATE/</li> <li>appropriate saved replies</li> </ul> <p>Additionally, if the site includes documentation, the maintainer shall ensure the following files are provided in the repository when starting the project and maintained throughout the project:</p> <ul> <li>.gitignore</li> <li>mkdocs.yml</li> <li>.github/workflows/deploy.yml (generates the documentation)</li> <li>docs/index.md</li> <li>docs/stylesheets/extra.css</li> <li>overrides/main.html (adds a status badge to the page)</li> <li>overrides/partials/nav.html (changes the naviation heading to be \"Contents\")</li> <li>overrides/partials/toc.html (changes TOC heading to be the document name)</li> </ul> <p>Finally, the site shall include installation guidance, which may be contained in the README.md file, a separate INSTALLATION.md file, or in project documentation.</p> <p>GitHub Help</p> <p>A template repository containing all of these files, which can be used to initialize new projects, is stored on the ITE GitHub Site.</p>"},{"location":"maintainer-responsibilities/#readmemd-file","title":"Readme.md File","text":"<p>The README.md file shall contain an introduction to the open-source project. A good readme file should be clear, concise, up-to-date, and detailed. This file is located in your root directory and is displayed as the homepage of the repository within GitHub.</p> <p>The README.md file shall contain the following information:</p> <ul> <li>project title</li> <li>information on how to access the current documentation for the project</li> <li>information on how to access prior releases of the project</li> <li>project summary, including its status and overview</li> <li>Acknowledgements of relevant funding sources, sponsors, and other open-source projects</li> <li>installation guidance</li> <li>tech and tools used in the project</li> <li>link to the code of conduct</li> <li>link to discussion forum for the project</li> <li>link to the issues page for the project and the types of issues accepted for the project</li> <li>link to the contributing guidelines</li> <li>link to the open source license</li> </ul> <p>Note</p> <p>A README file is written in the Markdown language, a popular language used in open source documentation like READMEs. The readme file does not use any of the special codes introduced by MkDocs or Materials for MkDocs.</p> <p>Examples of good README files</p> <ul> <li>OpenSauced App</li> <li>Astro documentation</li> <li>freeCodeCamp</li> <li>ITS Open-Source Process</li> </ul>"},{"location":"maintainer-responsibilities/#installation-guidance","title":"Installation Guidance","text":"<p>The installation guidance may be contained within the README.md file (e.g., if it is simple), be a separate file, or reference a section within the project documentation.</p> <p>This guide identifies the tools and technology used by the project and includes instructions for the following:</p> <ul> <li>forking the repository</li> <li>cloning the repository</li> <li>installing the dependencies</li> <li>setting up the environment variables</li> <li>setting up the database, if applicable</li> <li>running the project locally</li> </ul> <p>The best way to test your guide is by setting up the project locally using your guide. If you encounter issues getting your project to work, you will discover it quickly and can update the documentation to add or clarify the missing piece.</p> <p>Example</p> <p>OpenSauced Contributing Guidelines</p>"},{"location":"maintainer-responsibilities/#code-of-conduct-file","title":"Code of Conduct File","text":"<p>The CODE_OF_CONDUCT.md file shall define the rules and behaviors that are to be followed for the project.</p> <p>The CODE_OF_CONDUCT.md file should consist of a reference to the ITS Open-Source Code of Conduct with any exceptions and extensions identified.</p> <p>Note</p> <p>It is expected that exceptions and extensions to the code of conduct will be rare.</p>"},{"location":"maintainer-responsibilities/#contributing-file","title":"Contributing File","text":"<p>The CONTRIBUTING.md file shall define the rules for contributing to the project.</p> <p>The CONTRIBUTING.md file should consist of a reference to the ITS Open-Source Contributor Responsibilities with any exceptions and extensions identified.</p> <p>The CONTRIBUTING.md file should identify specific types of conventions that apply to the project.</p> <p>Example</p> <p>The ITS Open-Source Process project only has documentation and while the resulting specification discusses coding conventions, the project does not include any code, ASN.1 or MIBs.</p> <p>Note</p> <p>Areas where exceptions and extensions are expected to occur include:</p> <ul> <li>documentation conventions (e.g., extensions for consistency in presenting project-specific information),</li> <li>coding conventions (e.g., for languages not discussed in the ITE Open Source Process documentation, special naming conventions),</li> <li>testing and linting requirements</li> <li>the process to claim ownership pf issues (e.g., WG approvals),</li> <li>guidelines for commit conventions</li> <li>requirements for creating pull requests (e.g., fields that need to be included),   and</li> <li>requirements for pull requests to be approved (e.g., WG approvals)</li> </ul>"},{"location":"maintainer-responsibilities/#license-file","title":"License File","text":"<p>Per The Legal Side of Open Source</p> <p>Making your GitHub project public is not the same as licensing your project. Public projects are covered by GitHub\u2019s Terms of Service, which allows others to view and fork your project, but your work otherwise comes with no permissions.</p> <p>If you want others to use, distribute, modify, or contribute back to your project, you need to include an open source license. For example, someone cannot legally use any part of your GitHub project in their code, even if it\u2019s public, unless you explicitly give them the right to do so.</p> <p>The LICENSE file shall be a well-known Free and Open Source license.</p> <p>For NTCIP documentation projects, including standards and ASN.1, the license should be CC BY 4.0.</p> <p>Note</p> <p>The CC BY license is designed for documentation and other creative works where uers are allowed to use, distribute, modify, and contribute but any derivative works are required to give attribution to the source of the material and cannot \"implicitly or explicitly assert or imply any connection with, sponsorship, or endorsement by the licensor.\"</p> <p>For NTCIP projects involving code for a computer program, the license should be the Gnu Lesser General Public License Version 3.</p> <p>Note</p> <p>The LGPL v3 license is designed for compilable software that runs on a machine. Like the CC BY license, it allows uers to use, distribute, modify, and contribute material as long as they give attribution to the original source and does not provide any rights to the names, trademarks, or logos of the original source.</p>"},{"location":"maintainer-responsibilities/#security-file","title":"Security file","text":"<p>The SECURITY.md file shall indicate how to provide reports of security issues through private channels to prevent exposure of the vulnerabilities prior to their fix.</p>"},{"location":"maintainer-responsibilities/#code-owners-file","title":"Code Owners File","text":"<p>The .github/CODEOWNERS file shall conform to the rules defined in the official GitHub documentation.</p> <p>Note</p> <p>This ensures that the correct maintainers are notified when PRs are submitted.</p> <p>Example</p> <p>By opting-in to \"require approval\" and \"require review from code owners\", a WG can require a majority of voting members of the WG to approve any pull request before it can be merged into the protected branch. This can reduce the chance of merging pull requests that can break production.</p>"},{"location":"maintainer-responsibilities/#issue-templates","title":"Issue Templates","text":"<p>The maintainer shall define appropriate issue forms.</p> <p>The maintainer shall develop the forms using YAML per the GitHub instructions.</p> <p>Note</p> <p>Issue forms allow the maintainer to ensure commenters provide key information (or at least provide text for specific fields) when they report issues making the triage process, and the review of pull requests easier to perform. Additionally, future contributors can benefit from these templates by understanding the history of changes made, which can help them debug or understand the code involved.</p> <p>You can create various issue forms, such as bug reports, feature requests, documentation updates, etc. Each form can specify which fields are required, such as the steps for reproducing the bug or a details section for a feature request. The form can also be designed to automatically attach specific labels like<code>feature</code>, <code>needs triage</code>, or <code>bug</code> to quickly identify the type of issue.</p> <p>Example</p> <p><code>.github/ISSUE_TEMPLATE/documentation_bug.yml</code> or <code>.github/ISSUE_TEMPLATE/documentation_enhancement.yml</code></p>"},{"location":"maintainer-responsibilities/#pull-request-templates","title":"Pull Request Templates","text":"<p>The maintainer shall define appropriate pull request templates.</p> <p>Note</p> <p>GitHub currently only supports markdown templates for pull requests rather than YAML forms. Nonetheless, the templates serve a similar purpose in that they guide contributors in providing specific and structured information when opening pull requests in your project.</p> <p>Example</p> <p>.github/PULL_REQUEST_TEMPLATE/PULL_REQUEST_TEMPLATE.md</p> <p>Tip</p> <p>You can learn more about creating a pull request template on the official GitHub documentation.</p> <p></p>"},{"location":"maintainer-responsibilities/#saved-replies","title":"Saved Replies","text":"<p>Sometimes, you repeatedly write the same reply to issues or pull requests. Clear communication between maintainers and contributors is crucial. So, when you write all comments manually, your messages will no longer be consistent and may be unclear. You can create saved replies when you frequently respond to issues and pull requests with the same comments.</p> <p>Saved replies allow you to create a reusable response to issues, pull requests, and discussions and use it across repositories. It will save you time responding to contributors while keeping the consistency of your message. You can always modify your replies if necessary.</p> <p>Read the GitHub documentation for complete instructions about how to create saved replies.</p> <p></p>"},{"location":"maintainer-responsibilities/#gitignore-file","title":"Gitignore File","text":"<p>If there are any files that are likely to exist within the project directory that should not become a part of the repository, the maintainer shall include a <code>.gitignore</code> file.</p> <p>Example</p> <p>Projects that include documentation that is based on MkDocs typically have a <code>site</code> directory generated by MkDocs as a part of the process to generate a static website for review. This directory is not intended to be part of the registry as GitHub will produce its own generated site. In this case, the project is to include a <code>.gitignore</code> file that contains the line \"site/\", as for this project.</p>"},{"location":"maintainer-responsibilities/#mkdocsyml-file","title":"Mkdocs.yml File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>mkdocs.yml</code> file.</p> <p>Note</p> <p>The mkdocs.yml file defines directives to the mkdocs engine when generating the static website. For example, it defines</p> <ul> <li>name of the site,</li> <li>URL of the site,</li> <li>navigation menu,</li> <li>theme,</li> <li>extensions/plugins used, and</li> <li>other details</li> </ul> <p>Example</p> <p>Mkdocs file for ITS Open-Source Process</p>"},{"location":"maintainer-responsibilities/#deployyml-file","title":"Deploy.yml File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>.github/workflows/deploy.yml</code> file that deploys the MkDocs site to GitHub Pages.</p> <p>Note</p> <p>The deploy.yml file can be used to automate actions when pull requests are merged with the project. For example, for projects that use MkDocs, the deploy file can ensure that the GitHub Pages site is updated with the new material when a pull request is merged.</p> <p>Example</p> <p>Deploy file for ITS Open-Source Process</p>"},{"location":"maintainer-responsibilities/#index-file","title":"Index File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>docs/index.md</code> file that provides a cover page for the document.</p>"},{"location":"maintainer-responsibilities/#extracss-file","title":"Extra.css File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>docs/stylesheets/extra.css</code> file that defines the heading styles to be used for the body and the annexes (i.e., adding setion numbers in front of headings).</p> <p>The maintainer shall ensure that this badge only changes per the approval process defined for the project.</p>"},{"location":"maintainer-responsibilities/#mainhtml-file","title":"Main.html File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>overrides/main.html</code> file that provides a badge that identifies the status of the project files.</p> <p>The maintainer shall ensure that this badge only changes per the approval process defined for the project.</p> <p>Note</p> <p>By default, MkDocs does not display a status badge. Adding this badge ensures that users are aware of the status of the material located on the page.</p> <p>Example</p> <p>Main.html file for ITS Open-Source Process</p>"},{"location":"maintainer-responsibilities/#navhtml-file","title":"Nav.html File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>overrides/partials/nav.html</code> file that overrides the title assigned to the left-hand navigation menu to be \"Contents\".</p> <p>Note</p> <p>By default, MkDocs entitles the left hand navigation (i.e., navigation of pages) with the title of the site. To better align with NTCIP formats, the nav.html file is provided to change this to \"Contents\".</p> <p>Example</p> <p>Nav.html file for ITS Open-Source Process</p>"},{"location":"maintainer-responsibilities/#tochtml-file","title":"Toc.html File","text":"<p>If the project includes documentation using MkDocs, the maintainer shall define a <code>overrides/partials/toc.html</code> file that overrides the title assigned to the navigation menu on the right side of the screen.</p> <p>Note</p> <p>By default, MkDocs entitles the right-hand navigation (i.e., the contents of the current page) as \"Contents\". To better align with NTCIP formats, the standard toc.html file changes this to the title of the current page.</p> <p>Example</p> <p>Toc.html file for ITS Open-Source Process</p>"},{"location":"maintainer-responsibilities/#define-project-structure","title":"Define Project Structure","text":"<p>Once the project is established, configured, and the loaded with the initial project files, the maintainer shall establish the plan for the project by defining issues along with any appropriate stub files that can provide further guidance.</p> <p>Note</p> <p>This includes defining the plan for all aspects of the project (e.g., documentation and code).</p>"},{"location":"maintainer-responsibilities/#issue-triage","title":"Issue Triage","text":""},{"location":"maintainer-responsibilities/#overview_2","title":"Overview","text":"<p>Once issues are being created for the project, the maintainer will need to triage these issues to ensure that they contribute to the project plan and so that they can be claimed by contributors.</p> <p>Learning to triage issues is essential for any open-source maintainer. This involves going through the existing list of open issues and prioritizing them in order of importance. Some open issues will be critical bug fixes, while others might be nice to have feature requests. Sometimes, you might have issues opened for things that are not a right fit for the project.</p>"},{"location":"maintainer-responsibilities/#triage-pre-assessment","title":"Triage Pre-Assessment","text":""},{"location":"maintainer-responsibilities/#overview_3","title":"Overview","text":"<p>Prior to performing any detailed triage, it is important to screen reported issues that are not appropriate for further investigation.</p>"},{"location":"maintainer-responsibilities/#dealing-with-spam","title":"Dealing with Spam","text":"<p>When a comment is spam, clearly combative, or unhelpful, the maintainer should avoid direct engagement, label the issue as <code>spam</code>, close the issue, and move on.</p> <p>Example</p> <p>This project is terrible! Nothing works, and your code is garbage. I can't believe anyone would use this. Fix it ASAP!!!</p>"},{"location":"maintainer-responsibilities/#insufficient-information-issues","title":"Insufficient Information Issues","text":"<p>When a comment does not provide concrete details about the issue, the maintainer should respond by requesting more information.</p> <p>Example</p> <p>If it is a bug report, ask for more details on reproducing it. If it is a feature request, ask for clarification on style or functionality changes.</p> <p>If the commenter does not respond within a week, the maintainer should message them again for more details.</p> <p>If a few weeks pass and the issue is not considered critical, the maintainer may close the issue.</p>"},{"location":"maintainer-responsibilities/#stale-issues","title":"Stale Issues","text":"<p>The maintainer may may label issues that have not been worked on for months as <code>stale</code>.</p> <p>Example</p> <p>An issue reported on a portion of a project that has been significantly edited by other contributions.</p> <p>If the maintainer wishes to resurrect a <code>stale</code> issue, the maintainer shall go through the normal triage process, including adding and removing labels as appropriate.</p> <p>If the maintainer believes a <code>stale</code> issue no longer applies, the maintainer should close the issue. This process may be automated (e.g., using an action like Close Stale Issues and PRs.</p>"},{"location":"maintainer-responsibilities/#ensuring-proper-categorization","title":"Ensuring Proper categorization","text":"<p>For issues that have sufficient information and are not <code>spam</code> or <code>stale</code>, the maintainer shall add and/or remove labels as appropriate for proper management.</p> <p>Note</p> <p>Most ITS standardization projects are expected to have a small number of contributors, in which case, the following set of labels are generally appropriate. Projects with more contributors should consider a fuller range of labels as adopted by the open-source community.</p> <p>The following labels should be considered for most specification projects:</p> <ol> <li> <p>General Type Labels</p> <ul> <li>github automation: an issue related to the automated github scripts in    testing or generating the documentation.</li> <li>question: Indicates a general inquiry or a request for clarification about    how something works. Questions should be moved to the discussion tab, but the    issue can be labeled with <code>question</code> and closed.</li> </ul> </li> <li> <p>Type Labels for Documentation</p> <ul> <li>documentation bug: Identifies a reported problem or flaw in the documentation.</li> <li>documentation enhancement: Refers to a suggestion or request to improve    or add informative text in the documentation.</li> <li>new user need: Suggests a new user need to be added in the document.</li> <li>user need modification: Suggests a modification to a user need in the document.</li> <li>new requirement: Suggests a new requirement to be added in the document.</li> <li>requirement modification: Suggests a modification to a requirement in    the document.</li> <li>dialog modification: Suggests a modification to a dialog in the document.</li> <li>ASN.1 modification: A change to the ASN.1 or MIB.</li> </ul> </li> <li> <p>Type Labels for Code</p> <ul> <li>bug: Identifies a reported problem, flaw, or unexpected behavior in the code.</li> <li>enhancement: Refers to a suggestion or request to improve or add features to the project.</li> <li>feature: Used for issues proposing new functionality or significant changes.</li> <li>refactor: A change in the codebase that improves its structure or readability without altering its functionality.</li> <li>test: Issues related to unit tests, integration tests, or overall testing improvements.</li> </ul> </li> <li>Priority Labels (Help prioritize issues based on urgency or importance)<ul> <li>critical: Indicates urgent issue related to an existing release that needs to be addressed immediately (e.g., perhaps requiring its own release to formalize in a timely manner).</li> <li>high priority: Indicates urgent issue that needs to be addressed as soon as possible to allow for other tasks to proceed  for the current update but not critical.</li> <li>medium priority: Important issue to address prior to next release that relates to functionality but not high priority.</li> <li>low priority: Non-urgent issues that may be tackled if there\u2019s extra time or resources available.</li> </ul> </li> <li>Status Labels (Track the progress of an issue or pull request)<ul> <li>in progress: The issue is currently being worked on.</li> <li>blocked: Work on this issue is delayed or cannot proceed due to a dependency or external factor.</li> <li>needs discussion: Indicates that the issue or pull request requires further conversation or clarification before proceeding.</li> <li>triage: Newly created issues that need to be reviewed, categorized, and prioritized.</li> <li>ready for review: The pull request is awaiting review by project maintainers.</li> <li>duplicate: Marks an issue as being identical or closely related to an already existing issue.</li> <li>wontfix: Indicates that the maintainers have decided not to address the issue, either due to scope, relevance, or priority.</li> </ul> </li> <li>Difficulty or Effort Labels (Classify the expected effort required to address the issue)<ul> <li>good first issue: Meant for new contributors; these are usually easy-to-solve problems with clear instructions.</li> <li>beginner-friendly: Similar to \u201cgood first issue,\u201d these are relatively simple problems that beginners can address.</li> <li>help wanted: Indicates that maintainers need assistance with the issue, open to contributions.</li> <li>complex: Issues that are challenging, requiring significant experience or effort to resolve.</li> </ul> </li> <li>Version or Milestone Labels (Track issues by release or milestone)<ul> <li>compatibility: Associates an issue or pull request with a specific version or release milestone.</li> <li>next release: Indicates that the issue is planned for inclusion in the upcoming release.</li> <li>future: Refers to issues or features planned for future releases beyond the current roadmap.</li> </ul> </li> </ol>"},{"location":"maintainer-responsibilities/#triaging-bugs","title":"Triaging Bugs","text":"<p>The maintainer should verify the existance of any reported bug.</p> <p>Note</p> <p>If the maintainer expects to assign the issue to himself, the verification step can be postponed until the action is undertaken to correct the bug. If the bug cannot be verified, reply to the issue's original poster to gain more information and context.</p>"},{"location":"maintainer-responsibilities/#triaging-feature-requests","title":"Triaging Feature Requests","text":"<p>The maintainer shall ensure that any new feature request fits into the vision for the project.</p> <p>The maintainer shall communicate with the original poster of the issue to determine how to best deal with the issue, including:</p> <ul> <li>assigning to the originator, if they express a willingness to contribute a solution,</li> <li>assigning to the originator and someone else (e.g., a maintainer), if the originator is willing to contribute to a solution but is unwilling to develop and propose it,</li> <li>adding a <code>help wanted</code>, if the maintainer wishes to look for another contributor, or</li> <li>assigning it to himself or another core team member, if the maintainer expects the issue to be addressed by them in a timely manner.</li> </ul> <p>Note</p> <p>Complex issues are best assigned to core team members.</p>"},{"location":"maintainer-responsibilities/#triaging-duplicate-issues","title":"Triaging Duplicate Issues","text":"<p>When assigning a <code>duplicate</code> label, the maintainer should respond  to the originator of the issue.</p> <p>Example</p> <p>Thank you for taking the time to open this issue. Another team member is working on this feature, which will be added soon. As a result, we are going to close this issue.</p>"},{"location":"maintainer-responsibilities/#triaging-rejected-issues","title":"Triaging Rejected Issues","text":"<p>When assigning a <code>wontfix</code> label, the maintainer should respond  to the originator of the issue.</p> <p>Example</p> <p>Thank you for being so interested in our project. The feature you have proposed would not be a good fit for this project's current scope and direction. At this time, we will not be moving forward with this feature.</p>"},{"location":"maintainer-responsibilities/#reviewing-pull-requests","title":"Reviewing Pull Requests","text":""},{"location":"maintainer-responsibilities/#overview_4","title":"Overview","text":"<p>It is the maintainer's responsibility to ensure that the suggested code or documentation update meets the standards of the project and doesn't introduce any new issues for the project. You will also need to work with the contributor to help solve issues they encounter.</p>"},{"location":"maintainer-responsibilities/#pull-request-pre-assessment","title":"Pull-Request Pre-Assessment","text":""},{"location":"maintainer-responsibilities/#spam-pull-requests","title":"Spam Pull Requests","text":"<p>For any pull request deemed to be spam, the maintainer should label the request as <code>spam</code>, close the pull request, and not respond to the contributor.</p> <p>Example</p> <ul> <li>whitespace changes to the README file or other files</li> <li>random changes to files without an accompanying issue or explanation</li> <li>numerous links to unrelated websites or promotes products/services</li> <li>plagiarized content from other sources without permission or proper attribution</li> </ul>"},{"location":"maintainer-responsibilities/#low-quality-pull-requests","title":"Low-Quality Pull Requests","text":"<p>For a pull request deemed to be of low quality, the maintainer should reach out to the author, explaining what needs to be added and what changes need to be made.</p> <p>Example</p> <ul> <li>unfinished pull requests that do not address the entire issue</li> <li>code that does not fit within the established style guide for the project</li> <li>incomplete pull request forms that do not provide sufficient information on what changes were made</li> <li>address multiple issues at once and make it challenging to review</li> </ul> <p>Note</p> <p>Most of the time, low-quality pull requests are due to contributors not being aware of the rules to follow and need extra explanation and time to improve their pull requests.</p>"},{"location":"maintainer-responsibilities/#stale-pull-requests","title":"Stale Pull Requests","text":"<p>If the maintainer is unable to get a response from a contributor regarding an issue after a repeated attempts over several weeks, the maintainer may reassign the associated issue; if there is an associated pending pull request, the maintainer shall either close the pull request or take it over (i.e., by using the code in the pull request as the starting point for additional modifications).</p>"},{"location":"maintainer-responsibilities/#testing","title":"Testing","text":""},{"location":"maintainer-responsibilities/#overview_5","title":"Overview","text":"<p>The maintainer shall review each contribution to ensure that all tests pass, the contribution works as expected without introducing errors.</p>"},{"location":"maintainer-responsibilities/#automated-testing","title":"Automated Testing","text":"<p>The maintainer should maintain automated tests to protext against errors.</p> <p>GitHub Help</p> <p>GitHub allows maintainers to set up an automated test suite that runs on every pull request and merges into the main branch. Good automated test suites can help catch bugs from going into production and breaking the application.</p> <p>Example</p> <p>Is Website Vulnerable finds publicly known security vulnerabilities in JavaScript libraries' websites</p>"},{"location":"maintainer-responsibilities/#failing-automated-tests","title":"Failing Automated Tests","text":"<p>If a maintainer receives a pull request that fails automated testing, the maintainer should wait a few days to allow the contributor to resolve the issue independently.</p> <p>If the contributor does not resolve the issue within a few days, the maintainer shall contact the contributor to see if they need help.</p> <p>If the failing test is unrelated to the contributor's changes, the maintainer shall let the contributor know that the error is safe to ignore and that it will be fixed in another pull request.</p> <p>If the contributor fails to respond after repeated attempts over several weeks or months, the maintainer should close the pull request and move on.</p> <p>Note</p> <p>If multiple contributors fail the same set of tests, the tests may need improvement.</p> <p></p>"},{"location":"maintainer-responsibilities/#code-reviews","title":"Code Reviews","text":"<p>Prior to accepting any pull request, the maintainer shall review all proposed changes to ensure that they are designed to address the reported issue as claimed and that they conform to the projects coding and documentation guidelines.</p> <p>Note</p> <p>Performing this test before manual testing is useful as it will provide insights into the types of manual tests that are most appropriate.</p>"},{"location":"maintainer-responsibilities/#manual-testing","title":"Manual Testing","text":"<p>Prior to accepting a significant pull request, the maintainer should manually test the project using his local machine.</p> <p>Note</p> <p>If a pull request involves a small change to documentation or code, manual testing is less important, but the maintainer is the last line of defense before a pull request is merged in, which can potentially introduce new issues.</p>"},{"location":"maintainer-responsibilities/#effective-feedback","title":"Effective Feedback","text":"<p>If the maintainer discovers a problem with the pull request, the maintainer shall respond to the contributor with a detailed account of the problem.</p> <p>Note</p> <p>Sometimes, it helps to include a screenshot or screen recording. If the automated tests did not catch the problem, it might be worth creating a separate issue to update the test suite.</p> <p>The maintainer shall indicate the importance of each problem identified in the contribution with <code>critical</code>, <code>high</code>, <code>medium</code>, or <code>low</code>.</p> <p>Note</p> <p>Feedback provides a public log of how an issue has been addressed and needs to be informative, constructive, and helpful for the reviewer, contributor, and others that might read it at a later date.</p> <p>Example</p> <p>High: Please use more descriptive variable names for better readability. For example, revise the code to replace variable <code>d</code> with <code>duration</code>.</p>"},{"location":"maintainer-responsibilities/#missing-tests","title":"Missing Tests","text":"<p>Significant contributions of code should be accompanied with tests to help ensure that everything is working as expected.</p> <p>Note</p> <p>If the contribution does not include such tests, reach out to them to determine how they tested their contribution and let them know what parts need to be tested.</p>"},{"location":"maintainer-responsibilities/#creating-a-release","title":"Creating a Release","text":"<p>The maintainer shall create a formal release for each version of the document approved for release by the responsible WG or committee.</p> <p>GitHub Help</p> <p>Within GitHub, this can be achieved through theReleases tab.</p> <p>The maintainer shall assign a tag to the release that indicates the version number per Semantic Versioning 2.0.0.</p> <p>Note</p> <p>This produces a version number in the format of <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;pre-release&gt;]</code> format, where</p> <ul> <li>the <code>major</code> number increments (and the other values reset to 0) when non-backwards compatible changes are made,</li> <li>the <code>minor</code> version increments (and patch resets) when features are added in a backwards compatible manner,</li> <li>the <code>patch</code> increments when backward compatible fixes are made without any new features, and</li> <li>an optional <code>pre-release</code> code (preceded by a hyphen) indicates versions under development and must have a sequential alphanumeric identifier</li> </ul> <p>The maintainer shall attach a PDF and zip archive of the website in versioned directories in the gh-pages branch.</p> <pre><code>gh-pages/  \n\u251c\u2500\u2500 index.html (latest version)  \n\u251c\u2500\u2500 v1.0.0/  \n\u251c\u2500\u2500 v1.0.1/  \n\u251c\u2500\u2500 v1.1.0/  \n\u2514\u2500\u2500 v2.0.0/\n</code></pre> <p>GitHub Help</p> <p>This can be automated with GitHub actions.</p> <p>Note</p> <p>When deploying a new version, ensure the previous version is moved into its own directory before overwriting the index.html and other files for the new release.</p> <p>Example GitHub Action</p> <pre><code>name: Deploy MkDocs Site and Generate PDF\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n- name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n- name: Install dependencies\n        run: |\n          pip install mkdocs-material\n          pip install weasyprint\n\n- name: Build MkDocs site\n        run: mkdocs build\n\n- name: Generate PDF\n        run: |\n          weasyprint site/index.html site/docs.pdf\n        env:\n          WEASYPRINT_BASEURL: 'https://yourusername.github.io/repository-name/'\n\n- name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v4\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./site\n\n- name: Upload PDF to release\n        if: github.ref_type == 'tag'\n        uses: actions/upload-artifact@v3\n        with:\n          name: docs-${{ github.ref_name }}.pdf\n          path: site/docs.pdf\n</code></pre>"},{"location":"maintainer-responsibilities/#building-a-community","title":"Building a Community","text":""},{"location":"maintainer-responsibilities/#overview_6","title":"Overview","text":"<p>A vital component of any open source project is its community. Building a strong community can help accelerate the growth of your open source project. As new contributors discover and start to contribute to your project, you will want to create spaces for communication and collaboration.</p> <p>If your project is on GitHub, you can use GitHub Discussions as a way for contributors to post questions and facilitate conversations. WG meetings should be advertised on the discussion board to encourage participation.</p>"},{"location":"maintainer-responsibilities/#promptly-respond-and-address-concerns","title":"Promptly Respond and Address Concerns","text":"<p>Maintainers should establish a schedule to review incoming issues and pull requests and post this schedule within the discussion forum.</p> <p>Note</p> <p>It is important to set expectations as to how fast maintenance issues are likely to be addressed. This timline might vary considerably across ITS open-source projects and during teh lifetime of any one project (e.g., there are often periods of moew active development and less active development).</p> <p>The maintainer should set up GitHub Actions to automate responses that welcomes each new contributor and provides an estimated time by which the issue triage or PR review can be expected</p> <p>Note</p> <p>You can learn how to set one up inthis article.</p> <p></p>"},{"location":"maintainer-responsibilities/#advanced-features","title":"Advanced Features","text":""},{"location":"maintainer-responsibilities/#overview_7","title":"Overview","text":"<p>Leveraging GitHub Actions to bring Continuous Integration / Continuous Delivery or Deployment (CI/CD) into your workflow directly in your repository will let you run code, test, build, and deliver or deploy software with simple and secure workflows. Automating these tasks will speed up your deployment process.</p> <p>Using Git, GitHub, and GitHub Actions to build a CI/CD pipeline should give you confidence in your code.</p> <p>Below are some helpful resources to help you build a CI/CD pipeline with GitHub Actions:</p> <ul> <li>GitHub Docs: The complete CI/CD solution</li> <li>How to build a CI/CD pipeline with GitHub Actions in four simple steps</li> </ul> <p>There are many types of actions that you can set up for your project, depending on what you need. Below are some GitHub Actions that you usually find across repositories:</p>"},{"location":"maintainer-responsibilities/#linter","title":"Linter","text":"<p>Most open source repositories have linters that run on each pull request. Linter is a tool for detecting potential errors and maintaining a consistent code style in a project. Super-Linter is one of the most used actions. This action can help you maintain code quality and achieve a more readable and consistent style.</p>"},{"location":"maintainer-responsibilities/#code-scanning-tools","title":"Code Scanning Tools","text":"<p>Code scanning is a tool for detecting security vulnerabilities, possible bugs, and errors in code. You can use GitHub's code scanning feature and configure tools like CodeQL, which GitHub maintains, or third-party scanning tools such as SonarQube.</p>"},{"location":"maintainer-responsibilities/#creating-and-customizing-actions","title":"Creating and Customizing Actions","text":"<p>Actions of note:</p> <ul> <li>GitHub Marketplace</li> <li>Take Action: allows contributors to assign themselves to an issue by typing the <code>.take</code> command in the issue's comment.</li> <li>Triage Action: blocks the Take Action whenever a <code>needs triage</code> or <code>core team work</code> label exists.</li> </ul> <p>You can read more about GitHub Actions and how to create one in the official documentation.</p>"},{"location":"maintainer-responsibilities/#projects","title":"Projects","text":"<p>Keeping track of your issues is getting more challenging as your project progresses. A great tool that can help you organize and track your issues is Projects on GitHub. With projects, you can efficiently manage your project's features, roadmaps, or releases as they're built from and integrated with issues and pull requests that you add.</p> <p>You can choose a template for your project. One of the templates is the \"Kanban\" template. Here, you can create notes and place the existing issues and pull requests in the \"Backlog\", \"Ready\", \"In progress\", \"In review\", and \"Done\" columns. This will make it easy for you and your team to track the progress of your project.</p> <p>To create a new project:</p> <ol> <li>Navigate to your GitHub profile and click the \"Projects\" tab.</li> <li>Click the green \"New project\" button.</li> <li>Choose a template.</li> <li>Name your project and click the \"Create project\" button at the bottom.</li> </ol> <p>Please read the GitHub documentation to learn more about adding items to your project.</p> <p></p>"},{"location":"notices/","title":"Notices","text":""},{"location":"notices/#copyright","title":"Copyright","text":"<p>ITS Open-Source Process is licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0)  by the American Association of State Highway and Transportation Officials (AASHTO), the Institute of Transportation Engineers (ITE), and the National Electrical Manufacturers Association (NEMA).</p> <p>The CC BY 4.0 license requires that reusers give credit to AASHTO, ITE, and NEMA. It allows reusers to distribute, remix, adapt, and build upon the material in any medium or format, even for commercial purposes.</p>"},{"location":"notices/#content-and-liability-disclaimer","title":"Content and Liability Disclaimer","text":"<p>The information in this publication was considered technically sound by the consensus of persons engaged in the development and approval of the document at the time it was developed. Consensus does not necessarily mean that there is unanimous agreement among every person participating in the development of this document.</p> <p>AASHTO, ITE, and NEMA standards and guideline publications, of which the document contained herein is one, are developed through a voluntary consensus standards development process. This process brings together volunteers and seeks out the views of persons who have an interest in the topic covered by this publication. While AASHTO, ITE, and NEMA administer the process and establish rules to promote fairness in the development of consensus, they do not write the document and they do not independently test, evaluate, or verify the accuracy or completeness of any information or the soundness of any judgments contained in their standards and guideline publications.</p> <p>AASHTO, ITE, and NEMA disclaim liability for any personal injury, property, or other damages of any nature whatsoever, whether special, indirect, consequential, or compensatory, directly or indirectly resulting from the publication, use of, application, or reliance on this document. AASHTO, ITE, and NEMA disclaim and make no guaranty or warranty, express or implied, as to the accuracy or completeness of any information published herein, and disclaims and makes no warranty that the information in this document will fulfill any of your particular purposes or needs. AASHTO, ITE, and NEMA do not undertake to guarantee the performance of any individual manufacturer or seller's products or services by virtue of this standard or guide.</p> <p>In publishing and making this document available, AASHTO, ITE, and NEMA are not undertaking to render professional or other services for or on behalf of any person or entity, nor are AASHTO, ITE, and NEMA undertaking to perform any duty owed by any person or entity to someone else. Anyone using this document should rely on his or her own independent judgment or, as appropriate, seek the advice of a competent professional in determining the exercise of reasonable care in any given circumstances. Information and other standards on the topic covered by this publication may be available from other sources, which the user may wish to consult for additional views or information not covered by this publication.</p> <p>AASHTO, ITE, and NEMA have no power, nor do they undertake to police or enforce compliance with the contents of this document. AASHTO, ITE, and NEMA do not certify, test, or inspect products, designs, or installations for safety or health purposes. Any certification or other statement of compliance with any health or safety-related information in this document shall not be attributable to AASHTO, ITE, or NEMA and is solely the responsibility of the certifier or maker of the statement.</p>"},{"location":"notices/#trademark-notice","title":"Trademark Notice","text":"<p>NTCIP is a trademark of AASHTO / ITE / NEMA. All other marks mentioned in this project are the trademarks of their respective owners.</p>"},{"location":"overview/","title":"2 Overview","text":""},{"location":"overview/#overview","title":"Overview","text":"<p>Managing an open-source project involves four major activities as described in the following clauses:</p> <ol> <li>Establishing the project</li> <li>Processing comments</li> <li>Processing contributions</li> <li>Approving releases</li> </ol>"},{"location":"overview/#establishing-the-project","title":"Establishing the Project","text":"<p>Figure 1 provides an overview of the process to establish a new open-source project.</p> <pre><code>%%{init: { 'sequence': { 'mirrorActors': false } }}%%\nsequenceDiagram\n  participant Proposer\n  participant Committee\n  participant WG as Working Group\n  participant Maintainer\n  participant Repo as Open-Source Project Repository\n\n  Proposer -&gt;&gt; Committee: Propose project\n  Committee -&gt;&gt; WG: Establish WG\n  Committee -&gt;&gt; Maintainer: Assign maintainer\n  Maintainer -&gt;&gt; Repo: Establish public repository\n  Maintainer -&gt;&gt; Repo: Upload initial baseline\n  Maintainer -&gt;&gt; WG: Suggest project plan\n  WG --&gt;&gt; Maintainer: feedback\n  Maintainer -&gt;&gt; Repo: Post project plan\n  Maintainer -&gt;&gt; Repo: Create appropriate branches for work</code></pre> <p>When someone identifies a need for a new shared resource (e.g., industry standard, reusable code, etc.) within ITS, they can develop a proposal and submit it to an appropriate committee. The proposal can be relatively simple (e.g., a statement of goals and structure) or a complete prototype.</p> <p>If the proposal is accepted by the committee, the committee will assign a working group and one or more maintainers who will become responsible for leading the project. This will often include the individual proposing the project. The maintainer will establish the open-source project repository on the standards development organization's open-source website (e.g., GitHub account) and upload the initial project files.</p> <p>Needs Review</p> <p>Note</p> <p>The maintainer is a key role in the project. If the maintainer is not available for any reason, it can delay the triage of identified issues. It is the responsibility of the committee to ensure that the maintainer either has sufficient resources or has sufficient backup to provide a high degree of confidence that there is not an articicial bottleneck when contributors wish to address problems.</p> <p>Once the initial upload is provided, the maintainer will work with the working group to refine the vision for the project and establish the set of baseline issues as a part of the project plan. The project plan will also define the planned release schedule, which can be based on a calendar schedule, reaching milestones, or achieving other metrics. Members of the WG are encouraged to submit their issues directly so that the originator can be properly captured and to encourage WG members to become familiar with the process; however, the Maintainer can submit comments on the behalf of others, if needed.</p> <p>The Maintainer is also responsible for creating any necessary branches for developing draft materials. The \"main\" branch should always be restricted to formal releases. Working drafts and pre-releases should be contained within branches so that industry users do not accidentally look at a draft thinking that it is approved.</p> <p>Needs Review</p> <p>We need to review this process with a GitHub expert to determine the best way for managaing the website (and PDF) rendered versions of the current release alongside drafts. In other words, deployments need ready access to the current version (and all previous versions) while WG members need access to the current draft. By default GitHub only allows one rendered version but we could:</p> <ul> <li>Use separate repositories (e.g., NTCIP-8008 and NTCIP-8008-future)</li> <li>Use subdirectories (e.g., docs for current and docs/future for draft)</li> <li>Use a GitHub action to publish different branches to different subdirectories of the gh-pages branch</li> <li>Use a GitHub action to publish different branches to different repositories, one for each published/draft branch</li> </ul> <p>All projects should likely use the same mechanism and the selection should be made in consultation with GitHub experts.</p>"},{"location":"overview/#process-comments","title":"Process comments","text":"<p>Figure 2 provides an overview of how comments are processed for an open-source project.</p> <pre><code>%%{init: { 'sequence': { 'mirrorActors': false } }}%%\nsequenceDiagram\n  participant Commenter\n  participant WG as Working Group\n  participant Maintainer\n  participant Repo as Open-Source Project Repository\n\n  Proposer -&gt;&gt; Repo: Review materials\n  Proposer -&gt;&gt; Repo: Submit comment\n  Repo --&gt;&gt; Maintainer: Notify\n  Maintainer -&gt;&gt; WG: Seek guidance\n  WG --&gt;&gt; Maintainer: Provide feedback\n  Maintainer -&gt;&gt; Repo: Perform triage</code></pre> <p>Users of open-source projects often have questions, encounter bugs, request features, or provide feedback on usability. Submitting comments is the primary way for the community to help guide the development of the project. Comments can be submitted at any time.</p> <p>When comments are submitted, maintainers (and other followers) are notified. If the comment is submitted as an issue (as opposed to a discussion item), the maintainer triages the issue by determing its relevance, classification (e.g., bug, documentation issue), and priority. If needed, the maintainer can discuss the issue with the commentor or sponsoring WG to ensure consensus from the broader community.</p> <p>Needs Review</p> <p>Each project should identify its goals for triaging submitted issues. By default, projects should have a goal of triaging all comments within one month of their submittal, but the exact timeline might vary based on available resources, the criticality of the project, and other factors. If a submitted issue is not triaged within this timeline, the submitter should contact the parent standards development organization for guidance.</p> <p>As a result of the review, the issue can be accepted, merged with another issue, split into multiple issues, or rejected (e.g., if it does not fit with the project's goals). Once the triage is complete, the maintainer adds tags as appropriate to the issue so that it can properly be managed.</p>"},{"location":"overview/#procss-contributions","title":"Procss Contributions","text":"<p>Figure 3 provides an overview of processing contributions to an open-source project.</p> <pre><code>%%{init: { 'sequence': { 'mirrorActors': false } }}%%\nsequenceDiagram\n  participant WG as Working Group\n  participant Maintainer\n  participant Contributor\n  participant Repo as Open-Source Project Repository\n\n  Contributor -&gt;&gt; Repo: Review open issues\n  Contributor -&gt;&gt; Repo: Claim issue\n  Repo --&gt;&gt; Maintainer: Notify\n  Contributor -&gt;&gt; Repo: Create copy\n  Repo --&gt;&gt; Copy: Copy\n  Contributor -&gt;&gt; Copy: Make edits\n  Contributor -&gt;&gt; Repo: Submit pull request\n  Repo --&gt;&gt; Maintainer: Notify\n  Maintainer -&gt;&gt; Copy: Review\n  Maintainer -&gt;&gt; WG: Optionally coordinate\n  WG --&gt;&gt; Maintainer: Feedback\n  alt if acceptable\n    Maintainer -&gt;&gt; Copy: Merge\n    Copy --&gt;&gt; Repo: Merge\n  end</code></pre> <p>Open-source projects encourage contributions from the community, allowing others to solve issues or implement features. Contributors gain experience and recognition, while the project benefits from a broader range of solutions.</p> <p>Interested contributors browse the list of open issues, claim one they are interested in, and start working on a solution. When they have develped and tested their proposed solution, they submit a request for the maintainer to \"pull\" a copy of their changes from their site. This is known as a pull request (PR).</p> <p>When a PR is submitted, the maintainer is automatically notified and is responsible for reviewing the request to ensure that it:</p> <ul> <li>can be safely merged with the project without overwriting other changes,</li> <li>solves the stated problem without introducing bugs, and</li> <li>meets the project's guidelines (e.g., coding standards).</li> </ul> <p>During the review process, the maintainer can communicate with the contributor if questions arise or with the WG to ensure consensus on the details of the proposed change. If the process identifies any issues with the proposed change, it can be returned to the contributor to make additional revisions. If the changes are deemed to be satisfactory, the maintainer can accept the pull request and the changes will be merged into the open-source project.</p>"},{"location":"overview/#approve-releases","title":"Approve Releases","text":"<p>Figure 4 provides an overview of the process to approve a new release of an open-source project.</p> <pre><code>%%{init: { 'sequence': { 'mirrorActors': false } }}%%\nsequenceDiagram\n  participant AG as Approval Group\n  participant Maintainer\n  participant Repo as Open-Source Project Repository\n\n  Maintainer -&gt;&gt; AG: Suggest release (suggested release number)\n  AG -&gt;&gt; Repo: Review materials\n  AG --&gt;&gt; AG: Vote\n  AG --&gt;&gt; Maintainer: Report results\n  alt if approved\n    Maintainer -&gt;&gt; Repo: Tag as identified release number\n  else\n    Maintainer -&gt;&gt; Repo: Address identified issues\n  end</code></pre> <p>Releasing a project allows users to access a stable, tested version with new features, bug fixes, or improvements. It also provides a versioned snapshot that is easier to manage and distribute.</p> <p>Once all expected changes have been made to fulfil a defined stage in the project plan, the maintainer will follow the project's defined process for obtaining approval of the current draft as a formal release (e.g., v01.01.03) from the identified approval group (e.g., perhaps selected experts for a patch, the WG for a new feature, or the parent committee for non-backwards compatible changes). The exact approval group is defined in the project's plan.</p> <p>If approval is received, the maintainer:</p> <ul> <li>documents changes in release notes (if not already included);</li> <li>if it is a full release, moves the version to the main branch;</li> <li>tags the current version as a new release (e.g., \"v01.01.03\"); and</li> <li>provides a downloadable archive.</li> </ul> <p>If approval is not received, the maintainer ensures that all of the identified issues are properly recorded on the issues page and continues the process of addressing issues through contributions.</p> <p>This collaborative process allows open-source projects to evolve through contributions from users and developers worldwide, promoting continuous improvement while ensuring transparency and accountability.</p>"},{"location":"toc/","title":"Table of Contents","text":""},{"location":"wg-responsibilities/","title":"6 WG Responsibilities","text":""},{"location":"wg-responsibilities/#wg-responsibilities","title":"WG Responsibilities","text":""},{"location":"wg-responsibilities/#overview","title":"Overview","text":"<p>Each major stage of the open-source process is reviewed by a WG or committee to ensure a base level of consensus. The specific group that is required to provide consensus and the level of consensus required dependent upon the standardization path adopted for the project.</p> <p>Example</p> <p>An NTCIP experimental specification can be approved at the NTCIP WG level for all stages while an NTCIP standard requires Joint Committee approval for the project approval and release approval.</p> <p>The stages within the open-source process include:</p> <ul> <li>project approval</li> <li>issue prioritization</li> <li>pull-request approval</li> <li>release approval</li> </ul>"},{"location":"wg-responsibilities/#project-approval","title":"Project Approval","text":"<p>An appropriate WG or committee shall approve the formation of a project prior to establishing the SDO GitHub repository for the project.</p> <p>The appropriate WG or committee should be identified in policies adopted by any SDO adopting the ITS Open-Source Process.</p> <p>Note</p> <p>A contributor can establish their own GitHub repository for the project before formal approval to allow WG members to gain a better idea of what is being proposed.</p> <p>NTCIP Guidance</p> <p>NTCIP 8001 identifies the appropriate WG or committee for NTCIP open-source projects.</p>"},{"location":"wg-responsibilities/#issue-prioritization","title":"Issue Prioritization","text":"<p>A WG should oversee the prioritization of significant issues for each of its open-source projects.</p> <p>A WG may provide guidance to its maintainer as to what constitutes a significant issue and how various issues should be handled.</p> <p>Note</p> <p>Many issues can be prioritized by the maintainer without involving the WG; however, when major issues arise that affect the direction of the project, it is best to obtain direction from the WG to ensure resoures are managed properly.</p>"},{"location":"wg-responsibilities/#pull-request-approval","title":"Pull-Request Approval","text":"<p>The WG responsible for the open-source project shall approve each pull request prior to its merge into the SDO repository.</p> <p>The WG responsible for the open-source project shall establish its policies on what constitutes a pull-request approval.</p> <p>Note</p> <p>A pull-request approval typically requires simple majority with no sustained objections.</p> <p>GitHub Guidance</p> <p>This can be achieved by requiring a minimum number of approvals within GitHub among a designated set of voting members.</p>"},{"location":"wg-responsibilities/#approve-releases","title":"Approve Releases","text":"<p>The WG responsible for the open-source project shall approve each version of a project prior to it being tagged as a release.</p> <p>The WG responsible for the open-source project shall establish its policies on what constitutes a release approval.</p> <p>Example</p> <p>A release approval can be as simple as WG consensus or can require a formal ballot according to the processes adopted by the full committee.</p>"}]}